{"ast":null,"code":"import { parser, operationName, DocumentType, getApolloContext } from '@apollo/react-common';\nexport { ApolloConsumer, ApolloProvider, getApolloContext, resetApolloContext } from '@apollo/react-common';\nimport { __extends, __assign } from 'tslib';\nimport React, { useRef, useContext, useReducer, useEffect, useState } from 'react';\nimport { NetworkStatus, ApolloError } from 'apollo-client';\nimport { equal } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\n\nvar OperationData = function () {\n  function OperationData(options, context) {\n    this.isMounted = false;\n    this.previousOptions = {};\n    this.context = {};\n    this.options = {};\n    this.options = options || {};\n    this.context = context || {};\n  }\n\n  OperationData.prototype.getOptions = function () {\n    return this.options;\n  };\n\n  OperationData.prototype.setOptions = function (newOptions, storePrevious) {\n    if (storePrevious === void 0) {\n      storePrevious = false;\n    }\n\n    if (storePrevious && !equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n\n    this.options = newOptions;\n  };\n\n  OperationData.prototype.unmount = function () {\n    this.isMounted = false;\n  };\n\n  OperationData.prototype.refreshClient = function () {\n    var client = this.options && this.options.client || this.context && this.context.client;\n    process.env.NODE_ENV === \"production\" ? invariant(!!client, 2) : invariant(!!client, 'Could not find \"client\" in the context or passed in as an option. ' + 'Wrap the root component in an <ApolloProvider>, or pass an ' + 'ApolloClient instance in via options.');\n    var isNew = false;\n\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n\n    return {\n      client: this.client,\n      isNew: isNew\n    };\n  };\n\n  OperationData.prototype.verifyDocumentType = function (document, type) {\n    var operation = parser(document);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    process.env.NODE_ENV === \"production\" ? invariant(operation.type === type, 3) : invariant(operation.type === type, \"Running a \" + requiredOperationName + \" requires a graphql \" + (requiredOperationName + \", but a \" + usedOperationName + \" was used instead.\"));\n  };\n\n  return OperationData;\n}();\n\nvar QueryData = function (_super) {\n  __extends(QueryData, _super);\n\n  function QueryData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        onNewData = _a.onNewData;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.previousData = {};\n    _this.currentObservable = {};\n    _this.runLazy = false;\n\n    _this.runLazyQuery = function (options) {\n      _this.cleanup();\n\n      _this.runLazy = true;\n      _this.lazyOptions = options;\n\n      _this.onNewData();\n    };\n\n    _this.getExecuteResult = function () {\n      var result = _this.getQueryResult();\n\n      _this.startQuerySubscription();\n\n      return result;\n    };\n\n    _this.obsRefetch = function (variables) {\n      return _this.currentObservable.query.refetch(variables);\n    };\n\n    _this.obsFetchMore = function (fetchMoreOptions) {\n      return _this.currentObservable.query.fetchMore(fetchMoreOptions);\n    };\n\n    _this.obsUpdateQuery = function (mapFn) {\n      return _this.currentObservable.query.updateQuery(mapFn);\n    };\n\n    _this.obsStartPolling = function (pollInterval) {\n      _this.currentObservable && _this.currentObservable.query && _this.currentObservable.query.startPolling(pollInterval);\n    };\n\n    _this.obsStopPolling = function () {\n      _this.currentObservable && _this.currentObservable.query && _this.currentObservable.query.stopPolling();\n    };\n\n    _this.obsSubscribeToMore = function (options) {\n      return _this.currentObservable.query.subscribeToMore(options);\n    };\n\n    _this.onNewData = onNewData;\n    return _this;\n  }\n\n  QueryData.prototype.execute = function () {\n    this.refreshClient();\n\n    var _a = this.getOptions(),\n        skip = _a.skip,\n        query = _a.query;\n\n    if (skip || query !== this.previousData.query) {\n      this.removeQuerySubscription();\n      this.previousData.query = query;\n    }\n\n    this.updateObservableQuery();\n    if (this.isMounted) this.startQuerySubscription();\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  };\n\n  QueryData.prototype.executeLazy = function () {\n    return !this.runLazy ? [this.runLazyQuery, {\n      loading: false,\n      networkStatus: NetworkStatus.ready,\n      called: false,\n      data: undefined\n    }] : [this.runLazyQuery, this.execute()];\n  };\n\n  QueryData.prototype.fetchData = function () {\n    var options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    var obs = this.currentObservable.query;\n    var currentResult = obs.getCurrentResult();\n    return currentResult.loading ? obs.result() : false;\n  };\n\n  QueryData.prototype.afterExecute = function (_a) {\n    var _b = (_a === void 0 ? {} : _a).lazy,\n        lazy = _b === void 0 ? false : _b;\n    this.isMounted = true;\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  };\n\n  QueryData.prototype.cleanup = function () {\n    this.removeQuerySubscription();\n    delete this.currentObservable.query;\n    delete this.previousData.result;\n  };\n\n  QueryData.prototype.getOptions = function () {\n    var options = _super.prototype.getOptions.call(this);\n\n    if (this.lazyOptions) {\n      options.variables = __assign(__assign({}, options.variables), this.lazyOptions.variables);\n      options.context = __assign(__assign({}, options.context), this.lazyOptions.context);\n    }\n\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  };\n\n  QueryData.prototype.ssrInitiated = function () {\n    return this.context && this.context.renderPromises;\n  };\n\n  QueryData.prototype.getExecuteSsrResult = function () {\n    var ssrDisabled = this.getOptions().ssr === false;\n    var fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    var ssrLoading = __assign({\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client\n    }, this.observableQueryFields());\n\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previousData.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    var result;\n\n    if (this.ssrInitiated()) {\n      result = this.context.renderPromises.addQueryPromise(this, this.getExecuteResult) || ssrLoading;\n    }\n\n    return result;\n  };\n\n  QueryData.prototype.prepareObservableQueryOptions = function () {\n    var options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    var displayName = options.displayName || 'Query';\n\n    if (this.ssrInitiated() && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return __assign(__assign({}, options), {\n      displayName: displayName,\n      context: options.context,\n      metadata: {\n        reactComponent: {\n          displayName: displayName\n        }\n      }\n    });\n  };\n\n  QueryData.prototype.initializeObservableQuery = function () {\n    var _a, _b;\n\n    if (this.ssrInitiated()) {\n      this.currentObservable.query = this.context.renderPromises.getSSRObservable(this.getOptions());\n    }\n\n    if (!this.currentObservable.query) {\n      var observableQueryOptions = this.prepareObservableQueryOptions();\n      this.previousData.observableQueryOptions = __assign(__assign({}, observableQueryOptions), {\n        children: null\n      });\n      this.currentObservable.query = this.refreshClient().client.watchQuery(__assign({}, observableQueryOptions));\n\n      if (this.ssrInitiated()) {\n        (_b = (_a = this.context) === null || _a === void 0 ? void 0 : _a.renderPromises) === null || _b === void 0 ? void 0 : _b.registerSSRObservable(this.currentObservable.query, observableQueryOptions);\n      }\n    }\n  };\n\n  QueryData.prototype.updateObservableQuery = function () {\n    if (!this.currentObservable.query) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    var newObservableQueryOptions = __assign(__assign({}, this.prepareObservableQueryOptions()), {\n      children: null\n    });\n\n    if (!equal(newObservableQueryOptions, this.previousData.observableQueryOptions)) {\n      this.previousData.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable.query.setOptions(newObservableQueryOptions).catch(function () {});\n    }\n  };\n\n  QueryData.prototype.startQuerySubscription = function () {\n    var _this = this;\n\n    if (this.currentObservable.subscription || this.getOptions().skip) return;\n    var obsQuery = this.currentObservable.query;\n    this.currentObservable.subscription = obsQuery.subscribe({\n      next: function (_a) {\n        var loading = _a.loading,\n            networkStatus = _a.networkStatus,\n            data = _a.data;\n        var previousResult = _this.previousData.result;\n\n        if (previousResult && previousResult.loading === loading && previousResult.networkStatus === networkStatus && equal(previousResult.data, data)) {\n          return;\n        }\n\n        _this.onNewData();\n      },\n      error: function (error) {\n        _this.resubscribeToQuery();\n\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n        var previousResult = _this.previousData.result;\n\n        if (previousResult && previousResult.loading || !equal(error, _this.previousData.error)) {\n          _this.previousData.error = error;\n\n          _this.onNewData();\n        }\n      }\n    });\n  };\n\n  QueryData.prototype.resubscribeToQuery = function () {\n    this.removeQuerySubscription();\n    var lastError = this.currentObservable.query.getLastError();\n    var lastResult = this.currentObservable.query.getLastResult();\n    this.currentObservable.query.resetLastResults();\n    this.startQuerySubscription();\n    Object.assign(this.currentObservable.query, {\n      lastError: lastError,\n      lastResult: lastResult\n    });\n  };\n\n  QueryData.prototype.getQueryResult = function () {\n    var result = this.observableQueryFields();\n    var options = this.getOptions();\n\n    if (options.skip) {\n      result = __assign(__assign({}, result), {\n        data: undefined,\n        error: undefined,\n        loading: false,\n        called: true\n      });\n    } else {\n      var currentResult = this.currentObservable.query.getCurrentResult();\n      var loading = currentResult.loading,\n          partial = currentResult.partial,\n          networkStatus = currentResult.networkStatus,\n          errors = currentResult.errors;\n      var error = currentResult.error,\n          data = currentResult.data;\n\n      if (errors && errors.length > 0) {\n        error = new ApolloError({\n          graphQLErrors: errors\n        });\n      }\n\n      result = __assign(__assign({}, result), {\n        loading: loading,\n        networkStatus: networkStatus,\n        error: error,\n        called: true\n      });\n\n      if (loading) {\n        var previousData = this.previousData.result && this.previousData.result.data;\n        result.data = previousData && data ? __assign(__assign({}, previousData), data) : previousData || data;\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.query.getLastResult() || {}).data\n        });\n      } else {\n        var fetchPolicy = this.currentObservable.query.options.fetchPolicy;\n        var partialRefetch = options.partialRefetch;\n\n        if (partialRefetch && !data && partial && fetchPolicy !== 'cache-only') {\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n\n        result.data = data;\n      }\n    }\n\n    result.client = this.client;\n    this.previousData.loading = this.previousData.result && this.previousData.result.loading || false;\n    this.previousData.result = result;\n    this.currentObservable.query && this.currentObservable.query.resetQueryStoreErrors();\n    return result;\n  };\n\n  QueryData.prototype.handleErrorOrCompleted = function () {\n    var obsQuery = this.currentObservable.query;\n    if (!obsQuery || !this.previousData.result) return;\n    var _a = this.previousData.result,\n        data = _a.data,\n        loading = _a.loading,\n        error = _a.error;\n\n    if (!loading) {\n      var _b = this.getOptions(),\n          query = _b.query,\n          variables = _b.variables,\n          onCompleted = _b.onCompleted,\n          onError = _b.onError;\n\n      if (this.previousOptions && !this.previousData.loading && equal(this.previousOptions.query, query) && equal(this.previousOptions.variables, variables)) {\n        return;\n      }\n\n      if (onCompleted && !error) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  };\n\n  QueryData.prototype.removeQuerySubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n\n  QueryData.prototype.observableQueryFields = function () {\n    var observable = this.currentObservable.query;\n    return {\n      variables: observable.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    };\n  };\n\n  return QueryData;\n}(OperationData);\n\nfunction useDeepMemo(memoFn, key) {\n  var ref = useRef();\n\n  if (!ref.current || !equal(key, ref.current.key)) {\n    ref.current = {\n      key: key,\n      value: memoFn()\n    };\n  }\n\n  return ref.current.value;\n}\n\nfunction useBaseQuery(query, options, lazy) {\n  if (lazy === void 0) {\n    lazy = false;\n  }\n\n  var context = useContext(getApolloContext());\n\n  var _a = useReducer(function (x) {\n    return x + 1;\n  }, 0),\n      tick = _a[0],\n      forceUpdate = _a[1];\n\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    query: query\n  }) : {\n    query: query\n  };\n  var queryDataRef = useRef();\n  var queryData = queryDataRef.current || new QueryData({\n    options: updatedOptions,\n    context: context,\n    onNewData: function () {\n      if (!queryData.ssrInitiated()) {\n        Promise.resolve().then(forceUpdate);\n      } else {\n        forceUpdate();\n      }\n    }\n  });\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  if (queryData.ssrInitiated() && !queryDataRef.current) {\n    queryDataRef.current = queryData;\n  }\n\n  var memo = {\n    options: __assign(__assign({}, updatedOptions), {\n      onError: undefined,\n      onCompleted: undefined\n    }),\n    context: context,\n    tick: tick\n  };\n  var result = useDeepMemo(function () {\n    return lazy ? queryData.executeLazy() : queryData.execute();\n  }, memo);\n  var queryResult = lazy ? result[1] : result;\n  useEffect(function () {\n    if (!queryDataRef.current) {\n      queryDataRef.current = queryData;\n    }\n\n    return function () {\n      return queryData.cleanup();\n    };\n  }, []);\n  useEffect(function () {\n    return queryData.afterExecute({\n      lazy: lazy\n    });\n  }, [queryResult.loading, queryResult.networkStatus, queryResult.error, queryResult.data]);\n  return result;\n}\n\nfunction useQuery(query, options) {\n  return useBaseQuery(query, options, false);\n}\n\nfunction useLazyQuery(query, options) {\n  return useBaseQuery(query, options, true);\n}\n\nvar MutationData = function (_super) {\n  __extends(MutationData, _super);\n\n  function MutationData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        result = _a.result,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.runMutation = function (mutationFunctionOptions) {\n      if (mutationFunctionOptions === void 0) {\n        mutationFunctionOptions = {};\n      }\n\n      _this.onMutationStart();\n\n      var mutationId = _this.generateNewMutationId();\n\n      return _this.mutate(mutationFunctionOptions).then(function (response) {\n        _this.onMutationCompleted(response, mutationId);\n\n        return response;\n      }).catch(function (error) {\n        _this.onMutationError(error, mutationId);\n\n        if (!_this.getOptions().onError) throw error;\n      });\n    };\n\n    _this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n\n    _this.result = result;\n    _this.setResult = setResult;\n    _this.mostRecentMutationId = 0;\n    return _this;\n  }\n\n  MutationData.prototype.execute = function (result) {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    result.client = this.refreshClient().client;\n    return [this.runMutation, result];\n  };\n\n  MutationData.prototype.afterExecute = function () {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  };\n\n  MutationData.prototype.cleanup = function () {};\n\n  MutationData.prototype.mutate = function (mutationFunctionOptions) {\n    var _a = this.getOptions(),\n        mutation = _a.mutation,\n        variables = _a.variables,\n        optimisticResponse = _a.optimisticResponse,\n        update = _a.update,\n        _b = _a.context,\n        mutationContext = _b === void 0 ? {} : _b,\n        _c = _a.awaitRefetchQueries,\n        awaitRefetchQueries = _c === void 0 ? false : _c,\n        fetchPolicy = _a.fetchPolicy;\n\n    var mutateOptions = __assign({}, mutationFunctionOptions);\n\n    var mutateVariables = Object.assign({}, variables, mutateOptions.variables);\n    delete mutateOptions.variables;\n    return this.refreshClient().client.mutate(__assign({\n      mutation: mutation,\n      optimisticResponse: optimisticResponse,\n      refetchQueries: mutateOptions.refetchQueries || this.getOptions().refetchQueries,\n      awaitRefetchQueries: awaitRefetchQueries,\n      update: update,\n      context: mutationContext,\n      fetchPolicy: fetchPolicy,\n      variables: mutateVariables\n    }, mutateOptions));\n  };\n\n  MutationData.prototype.onMutationStart = function () {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  };\n\n  MutationData.prototype.onMutationCompleted = function (response, mutationId) {\n    var _a = this.getOptions(),\n        onCompleted = _a.onCompleted,\n        ignoreResults = _a.ignoreResults;\n\n    var data = response.data,\n        errors = response.errors;\n    var error = errors && errors.length > 0 ? new ApolloError({\n      graphQLErrors: errors\n    }) : undefined;\n\n    var callOncomplete = function () {\n      return onCompleted ? onCompleted(data) : null;\n    };\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data: data,\n        error: error\n      });\n    }\n\n    callOncomplete();\n  };\n\n  MutationData.prototype.onMutationError = function (error, mutationId) {\n    var onError = this.getOptions().onError;\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error: error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    if (onError) {\n      onError(error);\n    }\n  };\n\n  MutationData.prototype.generateNewMutationId = function () {\n    return ++this.mostRecentMutationId;\n  };\n\n  MutationData.prototype.isMostRecentMutation = function (mutationId) {\n    return this.mostRecentMutationId === mutationId;\n  };\n\n  MutationData.prototype.updateResult = function (result) {\n    if (this.isMounted && (!this.previousResult || !equal(this.previousResult, result))) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  };\n\n  return MutationData;\n}(OperationData);\n\nfunction useMutation(mutation, options) {\n  var context = useContext(getApolloContext());\n\n  var _a = useState({\n    called: false,\n    loading: false\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    mutation: mutation\n  }) : {\n    mutation: mutation\n  };\n  var mutationDataRef = useRef();\n\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData({\n        options: updatedOptions,\n        context: context,\n        result: result,\n        setResult: setResult\n      });\n    }\n\n    return mutationDataRef.current;\n  }\n\n  var mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n  useEffect(function () {\n    return mutationData.afterExecute();\n  });\n  return mutationData.execute(result);\n}\n\nvar SubscriptionData = function (_super) {\n  __extends(SubscriptionData, _super);\n\n  function SubscriptionData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.currentObservable = {};\n    _this.setResult = setResult;\n\n    _this.initialize(options);\n\n    return _this;\n  }\n\n  SubscriptionData.prototype.execute = function (result) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n\n    var currentResult = result;\n\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    var shouldResubscribe = this.getOptions().shouldResubscribe;\n\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (shouldResubscribe !== false && this.previousOptions && Object.keys(this.previousOptions).length > 0 && (this.previousOptions.subscription !== this.getOptions().subscription || !equal(this.previousOptions.variables, this.getOptions().variables) || this.previousOptions.skip !== this.getOptions().skip)) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n    this.previousOptions = this.getOptions();\n    return __assign(__assign({}, currentResult), {\n      variables: this.getOptions().variables\n    });\n  };\n\n  SubscriptionData.prototype.afterExecute = function () {\n    this.isMounted = true;\n  };\n\n  SubscriptionData.prototype.cleanup = function () {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  };\n\n  SubscriptionData.prototype.initialize = function (options) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  };\n\n  SubscriptionData.prototype.startSubscription = function () {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query.subscribe({\n      next: this.updateCurrentData.bind(this),\n      error: this.updateError.bind(this),\n      complete: this.completeSubscription.bind(this)\n    });\n  };\n\n  SubscriptionData.prototype.getLoadingResult = function () {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  };\n\n  SubscriptionData.prototype.updateResult = function (result) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  };\n\n  SubscriptionData.prototype.updateCurrentData = function (result) {\n    var onSubscriptionData = this.getOptions().onSubscriptionData;\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  };\n\n  SubscriptionData.prototype.updateError = function (error) {\n    this.updateResult({\n      error: error,\n      loading: false\n    });\n  };\n\n  SubscriptionData.prototype.completeSubscription = function () {\n    var onSubscriptionComplete = this.getOptions().onSubscriptionComplete;\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  };\n\n  SubscriptionData.prototype.endSubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n\n  return SubscriptionData;\n}(OperationData);\n\nfunction useSubscription(subscription, options) {\n  var context = useContext(getApolloContext());\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    subscription: subscription\n  }) : {\n    subscription: subscription\n  };\n\n  var _a = useState({\n    loading: !updatedOptions.skip,\n    error: undefined,\n    data: undefined\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var subscriptionDataRef = useRef();\n\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData({\n        options: updatedOptions,\n        context: context,\n        setResult: setResult\n      });\n    }\n\n    return subscriptionDataRef.current;\n  }\n\n  var subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n  useEffect(function () {\n    return subscriptionData.afterExecute();\n  });\n  useEffect(function () {\n    return subscriptionData.cleanup.bind(subscriptionData);\n  }, []);\n  return subscriptionData.execute(result);\n}\n\nfunction useApolloClient() {\n  var client = React.useContext(getApolloContext()).client;\n  process.env.NODE_ENV === \"production\" ? invariant(client, 1) : invariant(client, 'No Apollo Client instance can be found. Please ensure that you ' + 'have called `ApolloProvider` higher up in your tree.');\n  return client;\n}\n\nfunction makeDefaultQueryInfo() {\n  return {\n    seen: false,\n    observable: null\n  };\n}\n\nvar RenderPromises = function () {\n  function RenderPromises() {\n    this.queryPromises = new Map();\n    this.queryInfoTrie = new Map();\n  }\n\n  RenderPromises.prototype.registerSSRObservable = function (observable, props) {\n    this.lookupQueryInfo(props).observable = observable;\n  };\n\n  RenderPromises.prototype.getSSRObservable = function (props) {\n    return this.lookupQueryInfo(props).observable;\n  };\n\n  RenderPromises.prototype.addQueryPromise = function (queryInstance, finish) {\n    var info = this.lookupQueryInfo(queryInstance.getOptions());\n\n    if (!info.seen) {\n      this.queryPromises.set(queryInstance.getOptions(), new Promise(function (resolve) {\n        resolve(queryInstance.fetchData());\n      }));\n      return null;\n    }\n\n    return finish();\n  };\n\n  RenderPromises.prototype.hasPromises = function () {\n    return this.queryPromises.size > 0;\n  };\n\n  RenderPromises.prototype.consumeAndAwaitPromises = function () {\n    var _this = this;\n\n    var promises = [];\n    this.queryPromises.forEach(function (promise, queryInstance) {\n      _this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  };\n\n  RenderPromises.prototype.lookupQueryInfo = function (props) {\n    var queryInfoTrie = this.queryInfoTrie;\n    var query = props.query,\n        variables = props.variables;\n    var varMap = queryInfoTrie.get(query) || new Map();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    var variablesString = JSON.stringify(variables);\n    var info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  };\n\n  return RenderPromises;\n}();\n\nexport { RenderPromises, useApolloClient, useLazyQuery, useMutation, useQuery, useSubscription };","map":{"version":3,"mappings":";;;;;;;;AAaA;AAUE,yBAAYA,OAAZ,EAA+CC,OAA/C,EAA2E;AATpE,qBAAqB,KAArB;AACA,2BAA2C,EAA3C;AAGA,mBAA8B,EAA9B;AAGC,mBAAmC,EAAnC;AAGN,SAAKD,OAAL,GAAeA,OAAO,IAAK,EAA3B;AACA,SAAKC,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACD;;AAEMC,uCAAP;AACE,WAAO,KAAKF,OAAZ;AACD,GAFM;;AAIAE,uCAAP,UACEC,UADF,EAEEC,aAFF,EAEgC;AAA9B;AAAAA;AAA8B;;AAE9B,QAAIA,aAAa,IAAI,CAACC,KAAO,CAAC,KAAKL,OAAN,EAAeG,UAAf,CAA7B,EAAyD;AACvD,WAAKG,eAAL,GAAuB,KAAKN,OAA5B;AACD;;AACD,SAAKA,OAAL,GAAeG,UAAf;AACD,GARM;;AAcGD,oCAAV;AACE,SAAKK,SAAL,GAAiB,KAAjB;AACD,GAFS;;AAIAL,0CAAV;AACE,QAAMM,MAAM,GACT,KAAKR,OAAL,IAAgB,KAAKA,OAAL,CAAaQ,MAA9B,IACC,KAAKP,OAAL,IAAgB,KAAKA,OAAL,CAAaO,MAFhC;AAIAC,gBACIC,QADJ,KAEE,YAFF,GAEEC,sBAFF,GAEEA,2FACE,6DADF,GAEE,uCAFF,CAFF;AAOA,QAAIC,KAAK,GAAG,KAAZ;;AACA,QAAIJ,MAAM,KAAK,KAAKA,MAApB,EAA4B;AAC1BI,WAAK,GAAG,IAAR;AACA,WAAKJ,MAAL,GAAcA,MAAd;AACA,WAAKK,OAAL;AACD;;AACD,WAAO;AACLL,YAAM,EAAE,KAAKA,MADR;AAELI,WAAK;AAFA,KAAP;AAID,GAtBS;;AAwBAV,+CAAV,UAA6BY,QAA7B,EAAqDC,IAArD,EAAuE;AACrE,QAAMC,SAAS,GAAGC,MAAM,CAACH,QAAD,CAAxB;AACA,QAAMI,qBAAqB,GAAGC,aAAa,CAACJ,IAAD,CAA3C;AACA,QAAMK,iBAAiB,GAAGD,aAAa,CAACH,SAAS,CAACD,IAAX,CAAvC;AACAN,6BACY,YADZ,GACYE,UACGK,uBADH,EACG,CADH,CADZ,GAEeL,oGACRO,qBAAqB,aAArB,GAAgCE,iBAAhC,GAAiD,oBADzC,EAFf;AAKD,GATS;;AAUZ;AAAC,CAvED;;ACaA;AAAkDC;;AAQhD,qBAAYC,EAAZ,EAQC;QAPCtB;QACAC;QACAsB;;AAHF,gBASEC,kBAAMxB,OAAN,EAAeC,OAAf,KAAuB,IATzB;;AALQwB,yBAAqD,EAArD;AACAA,8BAA+D,EAA/D;AACAA,oBAAmB,KAAnB;;AAoGAA,yBAAe,UAACzB,OAAD,EAAuC;AAC5DyB,WAAI,CAACZ,OAAL;;AACAY,WAAI,CAACC,OAAL,GAAe,IAAf;AACAD,WAAI,CAACE,WAAL,GAAmB3B,OAAnB;;AACAyB,WAAI,CAACF,SAAL;AACD,KALO;;AAOAE,6BAAmB;AACzB,UAAMG,MAAM,GAAGH,KAAI,CAACI,cAAL,EAAf;;AACAJ,WAAI,CAACK,sBAAL;;AACA,aAAOF,MAAP;AACD,KAJO;;AAiTAH,uBAAa,UAACM,SAAD,EAAuB;AAC1C,kBAAI,CAACC,iBAAL,CAAuBC,KAAvB,CAA8BC,OAA9B,CAAsCH,SAAtC;AAAgD,KAD1C;;AAGAN,yBAAe,UACrBU,gBADqB,EAEgB;AAClC,kBAAI,CAACH,iBAAL,CAAuBC,KAAvB,CAA8BG,SAA9B,CAAwCD,gBAAxC;AAAyD,KAHtD;;AAKAV,2BAAiB,UACvBY,KADuB,EAIb;AACP,kBAAI,CAACL,iBAAL,CAAuBC,KAAvB,CAA8BK,WAA9B,CAA0CD,KAA1C;AAAgD,KAL7C;;AAOAZ,4BAAkB,UAACc,YAAD,EAAqB;AAC7Cd,WAAI,CAACO,iBAAL,IACEP,KAAI,CAACO,iBAAL,CAAuBC,KADzB,IAEER,KAAI,CAACO,iBAAL,CAAuBC,KAAvB,CAA8BO,YAA9B,CAA2CD,YAA3C,CAFF;AAGD,KAJO;;AAMAd,2BAAiB;AACvBA,WAAI,CAACO,iBAAL,IACEP,KAAI,CAACO,iBAAL,CAAuBC,KADzB,IAEER,KAAI,CAACO,iBAAL,CAAuBC,KAAvB,CAA8BQ,WAA9B,EAFF;AAGD,KAJO;;AAMAhB,+BAAqB,UAI3BzB,OAJ2B,EAQ1B;AACE,kBAAI,CAACgC,iBAAL,CAAuBC,KAAvB,CAA8BS,eAA9B,CAA8C1C,OAA9C;AAAsD,KATnD;;AA1aNyB,SAAI,CAACF,SAAL,GAAiBA,SAAjB;;AACD;;AAEMoB,gCAAP;AACE,SAAKC,aAAL;;AAEM;AAAA,QAAEC,cAAF;AAAA,QAAQZ,gBAAR;;AACN,QAAIY,IAAI,IAAIZ,KAAK,KAAK,KAAKa,YAAL,CAAkBb,KAAxC,EAA+C;AAC7C,WAAKc,uBAAL;AACA,WAAKD,YAAL,CAAkBb,KAAlB,GAA0BA,KAA1B;AACD;;AAED,SAAKe,qBAAL;AAEA,QAAI,KAAKzC,SAAT,EAAoB,KAAKuB,sBAAL;AAEpB,WAAO,KAAKmB,mBAAL,MAA8B,KAAKC,gBAAL,EAArC;AACD,GAdM;;AAgBAP,oCAAP;AACE,WAAO,CAAC,KAAKjB,OAAN,GACH,CACE,KAAKyB,YADP,EAEE;AACEC,aAAO,EAAE,KADX;AAEEC,mBAAa,EAAEC,aAAa,CAACC,KAF/B;AAGEC,YAAM,EAAE,KAHV;AAIEC,UAAI,EAAEC;AAJR,KAFF,CADG,GAUH,CAAC,KAAKP,YAAN,EAAoB,KAAKQ,OAAL,EAApB,CAVJ;AAWD,GAZM;;AAeAhB,kCAAP;AACE,QAAM3C,OAAO,GAAG,KAAK4D,UAAL,EAAhB;AACA,QAAI5D,OAAO,CAAC6C,IAAR,IAAgB7C,OAAO,CAAC6D,GAAR,KAAgB,KAApC,EAA2C,OAAO,KAAP;AAG3C,QAAMC,GAAG,GAAG,KAAK9B,iBAAL,CAAuBC,KAAnC;AACA,QAAM8B,aAAa,GAAGD,GAAG,CAACE,gBAAJ,EAAtB;AACA,WAAOD,aAAa,CAACX,OAAd,GAAwBU,GAAG,CAAClC,MAAJ,EAAxB,GAAuC,KAA9C;AACD,GARM;;AAUAe,qCAAP,UAAoBrB,EAApB,EAA6D;QAAvC2C;QAAAC;AACpB,SAAK3D,SAAL,GAAiB,IAAjB;;AAEA,QAAI,CAAC2D,IAAD,IAAS,KAAKxC,OAAlB,EAA2B;AACzB,WAAKyC,sBAAL;AACD;;AAED,SAAK7D,eAAL,GAAuB,KAAKsD,UAAL,EAAvB;AACA,WAAO,KAAKQ,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAP;AACD,GATM;;AAWA1B,gCAAP;AACE,SAAKI,uBAAL;AACA,WAAO,KAAKf,iBAAL,CAAuBC,KAA9B;AACA,WAAO,KAAKa,YAAL,CAAkBlB,MAAzB;AACD,GAJM;;AAMAe,mCAAP;AACE,QAAM3C,OAAO,GAAGwB,iBAAMoC,UAAN,CAAgBU,IAAhB,CAAgB,IAAhB,CAAhB;;AAEA,QAAI,KAAK3C,WAAT,EAAsB;AACpB3B,aAAO,CAAC+B,SAAR,GAAiBwC,sBACZvE,OAAO,CAAC+B,SADI,GAEZ,KAAKJ,WAAL,CAAiBI,SAFL,CAAjB;AAIA/B,aAAO,CAACC,OAAR,GAAesE,sBACVvE,OAAO,CAACC,OADE,GAEV,KAAK0B,WAAL,CAAiB1B,OAFP,CAAf;AAID;;AAGD,QAAI,KAAKyB,OAAT,EAAkB;AAChB,aAAO1B,OAAO,CAAC6C,IAAf;AACD;;AAED,WAAO7C,OAAP;AACD,GApBM;;AAsBA2C,qCAAP;AACE,WAAO,KAAK1C,OAAL,IAAgB,KAAKA,OAAL,CAAauE,cAApC;AACD,GAFM;;AAiBC7B,4CAAR;AACE,QAAM8B,WAAW,GAAG,KAAKb,UAAL,GAAkBC,GAAlB,KAA0B,KAA9C;AACA,QAAMa,aAAa,GAAG,KAAK9B,aAAL,GAAqBpC,MAArB,CAA4BmE,qBAAlD;;AAEA,QAAMC,UAAU,GAAGL;AACjBnB,aAAO,EAAE,IADQ;AAEjBC,mBAAa,EAAEC,aAAa,CAACF,OAFZ;AAGjBI,YAAM,EAAE,IAHS;AAIjBC,UAAI,EAAEC,SAJW;AAKjBmB,WAAK,EAAE,KALU;AAMjBrE,YAAM,EAAE,KAAKA;AANI,OAOd,KAAKsE,qBAAL,EAPc,CAAnB;;AAYA,QAAIL,WAAW,KAAK,KAAKM,YAAL,MAAuBL,aAA5B,CAAf,EAA2D;AACzD,WAAK5B,YAAL,CAAkBlB,MAAlB,GAA2BgD,UAA3B;AACA,aAAOA,UAAP;AACD;;AAED,QAAIhD,MAAJ;;AACA,QAAI,KAAKmD,YAAL,EAAJ,EAAyB;AACvBnD,YAAM,GACJ,KAAK3B,OAAL,CAAauE,cAAb,CAA6BQ,eAA7B,CACE,IADF,EAEE,KAAK9B,gBAFP,KAGK0B,UAJP;AAKD;;AAED,WAAOhD,MAAP;AACD,GA/BO;;AAiCAe,sDAAR;AACE,QAAM3C,OAAO,GAAG,KAAK4D,UAAL,EAAhB;AACA,SAAKqB,kBAAL,CAAwBjF,OAAO,CAACiC,KAAhC,EAAuCiD,YAAY,CAACC,KAApD;AACA,QAAMC,WAAW,GAAGpF,OAAO,CAACoF,WAAR,IAAuB,OAA3C;;AAIA,QACE,KAAKL,YAAL,OACC/E,OAAO,CAACqF,WAAR,KAAwB,cAAxB,IACCrF,OAAO,CAACqF,WAAR,KAAwB,mBAF1B,CADF,EAIE;AACArF,aAAO,CAACqF,WAAR,GAAsB,aAAtB;AACD;;AAED,iCACKrF,OADL,GACY;AACVoF,iBAAW,aADD;AAEVnF,aAAO,EAAED,OAAO,CAACC,OAFP;AAGVqF,cAAQ,EAAE;AAAEC,sBAAc,EAAE;AAAEH,qBAAW;AAAb;AAAlB;AAHA,KADZ;AAMD,GArBO;;AAuBAzC,kDAAR;;;AAIE,QAAI,KAAKoC,YAAL,EAAJ,EAAyB;AACvB,WAAK/C,iBAAL,CAAuBC,KAAvB,GAA+B,KAAKhC,OAAL,CAAcuE,cAAd,CAA8BgB,gBAA9B,CAC7B,KAAK5B,UAAL,EAD6B,CAA/B;AAGD;;AAED,QAAI,CAAC,KAAK5B,iBAAL,CAAuBC,KAA5B,EAAmC;AACjC,UAAMwD,sBAAsB,GAAG,KAAKC,6BAAL,EAA/B;AAEA,WAAK5C,YAAL,CAAkB2C,sBAAlB,GAAwClB,sBACnCkB,sBADmC,GACb;AACzBE,gBAAQ,EAAE;AADe,OADa,CAAxC;AAIA,WAAK3D,iBAAL,CAAuBC,KAAvB,GAA+B,KAAKW,aAAL,GAAqBpC,MAArB,CAA4BoF,UAA5B,CAAsCrB,aAChEkB,sBADgE,CAAtC,CAA/B;;AAIA,UAAI,KAAKV,YAAL,EAAJ,EAAyB;AACvB,yBAAK9E,OAAL,MAAY,IAAZ,IAAYqB,aAAZ,GAAY,MAAZ,GAAYA,GAAEkD,cAAd,MAA4B,IAA5B,IAA4BP,aAA5B,GAA4B,MAA5B,GAA4BA,GAAE4B,qBAAF,CAC1B,KAAK7D,iBAAL,CAAuBC,KADG,EAE1BwD,sBAF0B,CAA5B;AAID;AACF;AACF,GA5BO;;AA8BA9C,8CAAR;AAEE,QAAI,CAAC,KAAKX,iBAAL,CAAuBC,KAA5B,EAAmC;AACjC,WAAK6D,yBAAL;AACA;AACD;;AAED,QAAMC,yBAAyB,yBAC1B,KAAKL,6BAAL,EAD0B,GACU;AACvCC,cAAQ,EAAE;AAD6B,KADV,CAA/B;;AAKA,QACE,CAACtF,KAAO,CACN0F,yBADM,EAEN,KAAKjD,YAAL,CAAkB2C,sBAFZ,CADV,EAKE;AACA,WAAK3C,YAAL,CAAkB2C,sBAAlB,GAA2CM,yBAA3C;AACA,WAAK/D,iBAAL,CACGC,KADH,CACU+D,UADV,CACqBD,yBADrB,EAMGE,KANH,CAMS,aAAQ,CANjB;AAOD;AACF,GA3BO;;AA6BAtD,+CAAR;AAAA;;AACE,QAAI,KAAKX,iBAAL,CAAuBkE,YAAvB,IAAuC,KAAKtC,UAAL,GAAkBf,IAA7D,EAAmE;AAEnE,QAAMsD,QAAQ,GAAG,KAAKnE,iBAAL,CAAuBC,KAAxC;AACA,SAAKD,iBAAL,CAAuBkE,YAAvB,GAAsCC,QAAQ,CAACC,SAAT,CAAmB;AACvDC,UAAI,EAAE,UAAC/E,EAAD,EAAiC;YAA9B8B;YAASC;YAAeI;AAC/B,YAAM6C,cAAc,GAAG7E,KAAI,CAACqB,YAAL,CAAkBlB,MAAzC;;AAGA,YACE0E,cAAc,IACdA,cAAc,CAAClD,OAAf,KAA2BA,OAD3B,IAEAkD,cAAc,CAACjD,aAAf,KAAiCA,aAFjC,IAGAhD,KAAO,CAACiG,cAAc,CAAC7C,IAAhB,EAAsBA,IAAtB,CAJT,EAKE;AACA;AACD;;AAEDhC,aAAI,CAACF,SAAL;AACD,OAfsD;AAgBvDgF,WAAK,EAAE,UAACA,KAAD,EAAM;AACX9E,aAAI,CAAC+E,kBAAL;;AACA,YAAI,CAACD,KAAK,CAACE,cAAN,CAAqB,eAArB,CAAL,EAA4C,MAAMF,KAAN;AAE5C,YAAMD,cAAc,GAAG7E,KAAI,CAACqB,YAAL,CAAkBlB,MAAzC;;AACA,YACG0E,cAAc,IAAIA,cAAc,CAAClD,OAAlC,IACA,CAAC/C,KAAO,CAACkG,KAAD,EAAQ9E,KAAI,CAACqB,YAAL,CAAkByD,KAA1B,CAFV,EAGE;AACA9E,eAAI,CAACqB,YAAL,CAAkByD,KAAlB,GAA0BA,KAA1B;;AACA9E,eAAI,CAACF,SAAL;AACD;AACF;AA5BsD,KAAnB,CAAtC;AA8BD,GAlCO;;AAoCAoB,2CAAR;AACE,SAAKI,uBAAL;AASA,QAAM2D,SAAS,GAAG,KAAK1E,iBAAL,CAAuBC,KAAvB,CAA8B0E,YAA9B,EAAlB;AACA,QAAMC,UAAU,GAAG,KAAK5E,iBAAL,CAAuBC,KAAvB,CAA8B4E,aAA9B,EAAnB;AACA,SAAK7E,iBAAL,CAAuBC,KAAvB,CAA8B6E,gBAA9B;AACA,SAAKhF,sBAAL;AACAiF,UAAM,CAACC,MAAP,CAAc,KAAKhF,iBAAL,CAAuBC,KAArC,EAA6C;AAC3CyE,eAAS,WADkC;AAE3CE,gBAAU;AAFiC,KAA7C;AAID,GAlBO;;AAoBAjE,uCAAR;AACE,QAAIf,MAAM,GAAQ,KAAKkD,qBAAL,EAAlB;AACA,QAAM9E,OAAO,GAAG,KAAK4D,UAAL,EAAhB;;AAKA,QAAI5D,OAAO,CAAC6C,IAAZ,EAAkB;AAChBjB,YAAM,yBACDA,MADC,GACK;AACT6B,YAAI,EAAEC,SADG;AAET6C,aAAK,EAAE7C,SAFE;AAGTN,eAAO,EAAE,KAHA;AAITI,cAAM,EAAE;AAJC,OADL,CAAN;AAOD,KARD,MAQO;AAEL,UAAMO,aAAa,GAAG,KAAK/B,iBAAL,CAAuBC,KAAvB,CAA8B+B,gBAA9B,EAAtB;AACQ;AAAA,UAASiD,+BAAT;AAAA,UAAkB5D,2CAAlB;AAAA,UAAiC6D,6BAAjC;AACF;AAAA,UAAOzD,yBAAP;;AAIN,UAAIyD,MAAM,IAAIA,MAAM,CAACC,MAAP,GAAgB,CAA9B,EAAiC;AAC/BZ,aAAK,GAAG,IAAIa,WAAJ,CAAgB;AAAEC,uBAAa,EAAEH;AAAjB,SAAhB,CAAR;AACD;;AAEDtF,YAAM,yBACDA,MADC,GACK;AACTwB,eAAO,SADE;AAETC,qBAAa,eAFJ;AAGTkD,aAAK,OAHI;AAIT/C,cAAM,EAAE;AAJC,OADL,CAAN;;AAQA,UAAIJ,OAAJ,EAAa;AACX,YAAMN,YAAY,GAChB,KAAKA,YAAL,CAAkBlB,MAAlB,IAA4B,KAAKkB,YAAL,CAAkBlB,MAAlB,CAAyB6B,IADvD;AAEA7B,cAAM,CAAC6B,IAAP,GACEX,YAAY,IAAIW,IAAhB,yBAESX,eACAW,KAHT,GAKIX,YAAY,IAAIW,IANtB;AAOD,OAVD,MAUO,IAAI8C,KAAJ,EAAW;AAChBQ,cAAM,CAACC,MAAP,CAAcpF,MAAd,EAAsB;AACpB6B,cAAI,EAAE,CAAC,KAAKzB,iBAAL,CAAuBC,KAAvB,CAA8B4E,aAA9B,MAAkD,EAAnD,EACHpD;AAFiB,SAAtB;AAID,OALM,MAKA;AACG;AACA;;AACR,YACE6D,cAAc,IACd,CAAC7D,IADD,IAEAwD,OAFA,IAGA5B,WAAW,KAAK,YAJlB,EAKE;AASA0B,gBAAM,CAACC,MAAP,CAAcpF,MAAd,EAAsB;AACpBwB,mBAAO,EAAE,IADW;AAEpBC,yBAAa,EAAEC,aAAa,CAACF;AAFT,WAAtB;AAIAxB,gBAAM,CAACM,OAAP;AACA,iBAAON,MAAP;AACD;;AAEDA,cAAM,CAAC6B,IAAP,GAAcA,IAAd;AACD;AACF;;AAED7B,UAAM,CAACpB,MAAP,GAAgB,KAAKA,MAArB;AACA,SAAKsC,YAAL,CAAkBM,OAAlB,GACG,KAAKN,YAAL,CAAkBlB,MAAlB,IAA4B,KAAKkB,YAAL,CAAkBlB,MAAlB,CAAyBwB,OAAtD,IAAkE,KADpE;AAEA,SAAKN,YAAL,CAAkBlB,MAAlB,GAA2BA,MAA3B;AAMA,SAAKI,iBAAL,CAAuBC,KAAvB,IACE,KAAKD,iBAAL,CAAuBC,KAAvB,CAA6BsF,qBAA7B,EADF;AAGA,WAAO3F,MAAP;AACD,GA5FO;;AA8FAe,+CAAR;AACE,QAAMwD,QAAQ,GAAG,KAAKnE,iBAAL,CAAuBC,KAAxC;AACA,QAAI,CAACkE,QAAD,IAAa,CAAC,KAAKrD,YAAL,CAAkBlB,MAApC,EAA4C;AAEtC;AAAA,QAAE6B,cAAF;AAAA,QAAQL,oBAAR;AAAA,QAAiBmD,gBAAjB;;AAEN,QAAI,CAACnD,OAAL,EAAc;AACN;AAAA,UAAEnB,gBAAF;AAAA,UAASF,wBAAT;AAAA,UAAoByF,4BAApB;AAAA,UAAiCC,oBAAjC;;AAGN,UACE,KAAKnH,eAAL,IACA,CAAC,KAAKwC,YAAL,CAAkBM,OADnB,IAEA/C,KAAO,CAAC,KAAKC,eAAL,CAAqB2B,KAAtB,EAA6BA,KAA7B,CAFP,IAGA5B,KAAO,CAAC,KAAKC,eAAL,CAAqByB,SAAtB,EAAiCA,SAAjC,CAJT,EAKE;AACA;AACD;;AAED,UAAIyF,WAAW,IAAI,CAACjB,KAApB,EAA2B;AACzBiB,mBAAW,CAAC/D,IAAD,CAAX;AACD,OAFD,MAEO,IAAIgE,OAAO,IAAIlB,KAAf,EAAsB;AAC3BkB,eAAO,CAAClB,KAAD,CAAP;AACD;AACF;AACF,GAzBO;;AA2BA5D,gDAAR;AACE,QAAI,KAAKX,iBAAL,CAAuBkE,YAA3B,EAAyC;AACvC,WAAKlE,iBAAL,CAAuBkE,YAAvB,CAAoCwB,WAApC;AACA,aAAO,KAAK1F,iBAAL,CAAuBkE,YAA9B;AACD;AACF,GALO;;AA6CAvD,8CAAR;AACE,QAAMgF,UAAU,GAAG,KAAK3F,iBAAL,CAAuBC,KAA1C;AACA,WAAO;AACLF,eAAS,EAAE4F,UAAU,CAAC5F,SADjB;AAELG,aAAO,EAAE,KAAK0F,UAFT;AAGLxF,eAAS,EAAE,KAAKyF,YAHX;AAILvF,iBAAW,EAAE,KAAKwF,cAJb;AAKLtF,kBAAY,EAAE,KAAKuF,eALd;AAMLtF,iBAAW,EAAE,KAAKuF,cANb;AAOLtF,qBAAe,EAAE,KAAKuF;AAPjB,KAAP;AASD,GAXO;;AAYV;AAndA,EAAkD/H,aAAlD;;SChBgBgI,YACdC,QACAC,KAAS;AAET,MAAMC,GAAG,GAAGC,MAAM,EAAlB;;AAEA,MAAI,CAACD,GAAG,CAACE,OAAL,IAAgB,CAAClI,KAAO,CAAC+H,GAAD,EAAMC,GAAG,CAACE,OAAJ,CAAYH,GAAlB,CAA5B,EAAoD;AAClDC,OAAG,CAACE,OAAJ,GAAc;AAAEH,SAAG,KAAL;AAAOI,WAAK,EAAEL,MAAM;AAApB,KAAd;AACD;;AAED,SAAOE,GAAG,CAACE,OAAJ,CAAYC,KAAnB;AACD;;SCTeC,aACdxG,OACAjC,SACAkE,MAAY;AAAZ;AAAAA;AAAY;;AAEZ,MAAMjE,OAAO,GAAGyI,UAAU,CAACC,gBAAgB,EAAjB,CAA1B;;AACM;AAAA;AAAA;AAAA,MAACC,YAAD;AAAA,MAAOC,mBAAP;;AACN,MAAMC,cAAc,GAAG9I,OAAO,yBAAQA,OAAR,GAAe;AAAEiC,SAAK;AAAP,GAAf,IAA2B;AAAEA,SAAK;AAAP,GAAzD;AAEA,MAAM8G,YAAY,GAAGT,MAAM,EAA3B;AACA,MAAMU,SAAS,GACbD,YAAY,CAACR,OAAb,IACA,IAAI5F,SAAJ,CAAiC;AAC/B3C,WAAO,EAAE8I,cADsB;AAE/B7I,WAAO,SAFwB;AAG/BsB,aAAS;AACP,UAAI,CAACyH,SAAS,CAACjE,YAAV,EAAL,EAA+B;AAK7BkE,eAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuBN,WAAvB;AACD,OAND,MAMO;AAGLA,mBAAW;AACZ;AACF;AAf8B,GAAjC,CAFF;AAoBAG,WAAS,CAAChD,UAAV,CAAqB8C,cAArB;AACAE,WAAS,CAAC/I,OAAV,GAAoBA,OAApB;;AAKA,MAAI+I,SAAS,CAACjE,YAAV,MAA4B,CAACgE,YAAY,CAACR,OAA9C,EAAuD;AACrDQ,gBAAY,CAACR,OAAb,GAAuBS,SAAvB;AACD;;AAKD,MAAMI,IAAI,GAAG;AACXpJ,WAAO,wBAAO8I,cAAP,GAAqB;AAAErB,aAAO,EAAE/D,SAAX;AAAsB8D,iBAAW,EAAE9D;AAAnC,KAArB,CADI;AAEXzD,WAAO,SAFI;AAGX2I,QAAI;AAHO,GAAb;AAMA,MAAMhH,MAAM,GAAGsG,WAAW,CACxB;AAAM,WAAChE,IAAI,GAAG8E,SAAS,CAACK,WAAV,EAAH,GAA6BL,SAAS,CAACrF,OAAV,EAAlC;AAAsD,GADpC,EAExByF,IAFwB,CAA1B;AAKA,MAAME,WAAW,GAAGpF,IAAI,GACnBtC,MAAwC,CAAC,CAAD,CADrB,GAEnBA,MAFL;AAIA2H,WAAS,CAAC;AAGR,QAAI,CAACR,YAAY,CAACR,OAAlB,EAA2B;AACzBQ,kBAAY,CAACR,OAAb,GAAuBS,SAAvB;AACD;;AAED,WAAO;AAAM,sBAAS,CAACnI,OAAV;AAAmB,KAAhC;AACD,GARQ,EAQN,EARM,CAAT;AAUA0I,WAAS,CAAC;AAAM,oBAAS,CAACC,YAAV,CAAuB;AAAEtF,UAAI;AAAN,KAAvB;AAAgC,GAAvC,EAAyC,CAChDoF,WAAW,CAAClG,OADoC,EAEhDkG,WAAW,CAACjG,aAFoC,EAGhDiG,WAAW,CAAC/C,KAHoC,EAIhD+C,WAAW,CAAC7F,IAJoC,CAAzC,CAAT;AAOA,SAAO7B,MAAP;AACD;;SClFe6H,SACdxH,OACAjC,SAA6C;AAE7C,SAAOyI,YAAY,CAAoBxG,KAApB,EAA2BjC,OAA3B,EAAoC,KAApC,CAAnB;AAID;;SCRe0J,aACdzH,OACAjC,SAAiD;AAEjD,SAAOyI,YAAY,CAAoBxG,KAApB,EAA2BjC,OAA3B,EAAoC,IAApC,CAAnB;AAID;;ACAD;AAGUqB;;AAMR,wBAAYC,EAAZ,EAUC;QATCtB;QACAC;QACA2B;QACA+H;;AAJF,gBAWEnI,kBAAMxB,OAAN,EAAeC,OAAf,KAAuB,IAXzB;;AAkCQwB,wBAAc,UACpBmI,uBADoB,EAIgC;AAHpD;AAAAA,kCAGI,EAHJ;AAGoD;;AAEpDnI,WAAI,CAACoI,eAAL;;AACA,UAAMC,UAAU,GAAGrI,KAAI,CAACsI,qBAAL,EAAnB;;AAEA,aAAOtI,KAAI,CAACuI,MAAL,CAAYJ,uBAAZ,EACJT,IADI,CACC,UAACc,QAAD,EAAiC;AACrCxI,aAAI,CAACyI,mBAAL,CAAyBD,QAAzB,EAAmCH,UAAnC;;AACA,eAAOG,QAAP;AACD,OAJI,EAKJhE,KALI,CAKE,UAACM,KAAD,EAAmB;AACxB9E,aAAI,CAAC0I,eAAL,CAAqB5D,KAArB,EAA4BuD,UAA5B;;AACA,YAAI,CAACrI,KAAI,CAACmC,UAAL,GAAkB6D,OAAvB,EAAgC,MAAMlB,KAAN;AACjC,OARI,CAAP;AASD,KAlBO;;AAtBN9E,SAAI,CAACwD,kBAAL,CAAwBjF,OAAO,CAACoK,QAAhC,EAA0ClF,YAAY,CAACmF,QAAvD;;AACA5I,SAAI,CAACG,MAAL,GAAcA,MAAd;AACAH,SAAI,CAACkI,SAAL,GAAiBA,SAAjB;AACAlI,SAAI,CAAC6I,oBAAL,GAA4B,CAA5B;;AACD;;AAEMC,mCAAP,UAAe3I,MAAf,EAA4C;AAC1C,SAAKrB,SAAL,GAAiB,IAAjB;AACA,SAAK0E,kBAAL,CAAwB,KAAKrB,UAAL,GAAkBwG,QAA1C,EAAoDlF,YAAY,CAACmF,QAAjE;AACAzI,UAAM,CAACpB,MAAP,GAAgB,KAAKoC,aAAL,GAAqBpC,MAArC;AACA,WAAO,CAAC,KAAKgK,WAAN,EAAmB5I,MAAnB,CAAP;AACD,GALM;;AAOA2I,wCAAP;AACE,SAAKhK,SAAL,GAAiB,IAAjB;AACA,WAAO,KAAK6D,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAP;AACD,GAHM;;AAKAkG,mCAAP,aAEC,CAFM;;AAwBCA,kCAAR,UACEX,uBADF,EACqE;AAE7D;AAAA,QACJQ,sBADI;AAAA,QAEJrI,wBAFI;AAAA,QAGJ0I,0CAHI;AAAA,QAIJC,kBAJI;AAAA,QAKJzG,eALI;AAAA,QAKJ0G,yCALI;AAAA,QAMJC,2BANI;AAAA,QAMJC,gDANI;AAAA,QAOJxF,4BAPI;;AASN,QAAMyF,aAAa,gBAAQlB,uBAAR,CAAnB;;AAEA,QAAMmB,eAAe,GAAGhE,MAAM,CAACC,MAAP,CACtB,EADsB,EAEtBjF,SAFsB,EAGtB+I,aAAa,CAAC/I,SAHQ,CAAxB;AAKA,WAAO+I,aAAa,CAAC/I,SAArB;AAEA,WAAO,KAAKa,aAAL,GAAqBpC,MAArB,CAA4BwJ,MAA5B,CAAkCzF;AACvC6F,cAAQ,UAD+B;AAEvCK,wBAAkB,oBAFqB;AAGvCO,oBAAc,EACZF,aAAa,CAACE,cAAd,IAAgC,KAAKpH,UAAL,GAAkBoH,cAJb;AAKvCH,yBAAmB,qBALoB;AAMvCH,YAAM,QANiC;AAOvCzK,aAAO,EAAE0K,eAP8B;AAQvCtF,iBAAW,aAR4B;AASvCtD,eAAS,EAAEgJ;AAT4B,OAUpCD,aAVoC,CAAlC,CAAP;AAYD,GAjCO;;AAmCAP,2CAAR;AACE,QAAI,CAAC,KAAK3I,MAAL,CAAYwB,OAAb,IAAwB,CAAC,KAAKQ,UAAL,GAAkBqH,aAA/C,EAA8D;AAC5D,WAAKC,YAAL,CAAkB;AAChB9H,eAAO,EAAE,IADO;AAEhBmD,aAAK,EAAE7C,SAFS;AAGhBD,YAAI,EAAEC,SAHU;AAIhBF,cAAM,EAAE;AAJQ,OAAlB;AAMD;AACF,GATO;;AAWA+G,+CAAR,UACEN,QADF,EAEEH,UAFF,EAEoB;AAEZ;AAAA,QAAEtC,4BAAF;AAAA,QAAeyD,gCAAf;;AAEE;AAAA,QAAM/D,wBAAN;AACR,QAAMX,KAAK,GACTW,MAAM,IAAIA,MAAM,CAACC,MAAP,GAAgB,CAA1B,GACI,IAAIC,WAAJ,CAAgB;AAAEC,mBAAa,EAAEH;AAAjB,KAAhB,CADJ,GAEIxD,SAHN;;AAKA,QAAMyH,cAAc,GAAG;AACrB,wBAAW,GAAG3D,WAAW,CAAC/D,IAAD,CAAd,GAAgC,IAA3C;AAA+C,KADjD;;AAGA,QAAI,KAAK2H,oBAAL,CAA0BtB,UAA1B,KAAyC,CAACmB,aAA9C,EAA6D;AAC3D,WAAKC,YAAL,CAAkB;AAChB1H,cAAM,EAAE,IADQ;AAEhBJ,eAAO,EAAE,KAFO;AAGhBK,YAAI,MAHY;AAIhB8C,aAAK;AAJW,OAAlB;AAMD;;AACD4E,kBAAc;AACf,GAxBO;;AA0BAZ,2CAAR,UAAwBhE,KAAxB,EAA4CuD,UAA5C,EAA8D;AACpD;;AAER,QAAI,KAAKsB,oBAAL,CAA0BtB,UAA1B,CAAJ,EAA2C;AACzC,WAAKoB,YAAL,CAAkB;AAChB9H,eAAO,EAAE,KADO;AAEhBmD,aAAK,OAFW;AAGhB9C,YAAI,EAAEC,SAHU;AAIhBF,cAAM,EAAE;AAJQ,OAAlB;AAMD;;AAED,QAAIiE,OAAJ,EAAa;AACXA,aAAO,CAAClB,KAAD,CAAP;AACD;AACF,GAfO;;AAiBAgE,iDAAR;AACE,WAAO,EAAE,KAAKD,oBAAd;AACD,GAFO;;AAIAC,gDAAR,UAA6BT,UAA7B,EAA+C;AAC7C,WAAO,KAAKQ,oBAAL,KAA8BR,UAArC;AACD,GAFO;;AAIAS,wCAAR,UAAqB3I,MAArB,EAAkD;AAChD,QACE,KAAKrB,SAAL,KACC,CAAC,KAAK+F,cAAN,IAAwB,CAACjG,KAAO,CAAC,KAAKiG,cAAN,EAAsB1E,MAAtB,CADjC,CADF,EAGE;AACA,WAAK+H,SAAL,CAAe/H,MAAf;AACA,WAAK0E,cAAL,GAAsB1E,MAAtB;AACD;AACF,GARO;;AASV;AAzKA,EAGU1B,aAHV;;SCPgBmL,YACdjB,UACApK,SAAgD;AAEhD,MAAMC,OAAO,GAAGyI,UAAU,CAACC,gBAAgB,EAAjB,CAA1B;;AACM;AAAAnF;AAAAJ;AAAA;AAAA,MAACxB,cAAD;AAAA,MAAS+H,iBAAT;;AACN,MAAMb,cAAc,GAAG9I,OAAO,yBAAQA,OAAR,GAAe;AAAEoK,YAAQ;AAAV,GAAf,IAA8B;AAAEA,YAAQ;AAAV,GAA5D;AAEA,MAAMkB,eAAe,GAAGhD,MAAM,EAA9B;;AACA,WAASiD,kBAAT,GAA2B;AACzB,QAAI,CAACD,eAAe,CAAC/C,OAArB,EAA8B;AAC5B+C,qBAAe,CAAC/C,OAAhB,GAA0B,IAAIgC,YAAJ,CAAoC;AAC5DvK,eAAO,EAAE8I,cADmD;AAE5D7I,eAAO,SAFqD;AAG5D2B,cAAM,QAHsD;AAI5D+H,iBAAS;AAJmD,OAApC,CAA1B;AAMD;;AACD,WAAO2B,eAAe,CAAC/C,OAAvB;AACD;;AAED,MAAMiD,YAAY,GAAGD,kBAAkB,EAAvC;AACAC,cAAY,CAACxF,UAAb,CAAwB8C,cAAxB;AACA0C,cAAY,CAACvL,OAAb,GAAuBA,OAAvB;AAEAsJ,WAAS,CAAC;AAAM,uBAAY,CAACC,YAAb;AAA2B,GAAlC,CAAT;AAEA,SAAOgC,YAAY,CAAC7H,OAAb,CAAqB/B,MAArB,CAAP;AACD;;AC7BD;AAGUP;;AAIR,4BAAYC,EAAZ,EAQC;QAPCtB;QACAC;QACA0J;;AAHF,gBASEnI,kBAAMxB,OAAN,EAAeC,OAAf,KAAuB,IATzB;;AAFQwB,8BAAmD,EAAnD;AAYNA,SAAI,CAACkI,SAAL,GAAiBA,SAAjB;;AACAlI,SAAI,CAACgK,UAAL,CAAgBzL,OAAhB;;;AACD;;AAEM0L,uCAAP,UAAe9J,MAAf,EAAgD;AAC9C,QAAI,KAAKgC,UAAL,GAAkBf,IAAlB,KAA2B,IAA/B,EAAqC;AACnC,WAAKhC,OAAL;AACA,aAAO;AACLuC,eAAO,EAAE,KADJ;AAELmD,aAAK,EAAE7C,SAFF;AAGLD,YAAI,EAAEC,SAHD;AAIL3B,iBAAS,EAAE,KAAK6B,UAAL,GAAkB7B;AAJxB,OAAP;AAMD;;AAED,QAAIgC,aAAa,GAAGnC,MAApB;;AACA,QAAI,KAAKgB,aAAL,GAAqBhC,KAAzB,EAAgC;AAC9BmD,mBAAa,GAAG,KAAK4H,gBAAL,EAAhB;AACD;;AAEK;;AACN,QAAI,OAAOC,iBAAP,KAA6B,UAAjC,EAA6C;AAC3CA,uBAAiB,GAAG,CAAC,CAACA,iBAAiB,CAAC,KAAKhI,UAAL,EAAD,CAAvC;AACD;;AAED,QACEgI,iBAAiB,KAAK,KAAtB,IACA,KAAKtL,eADL,IAEAyG,MAAM,CAAC8E,IAAP,CAAY,KAAKvL,eAAjB,EAAkC6G,MAAlC,GAA2C,CAF3C,KAGC,KAAK7G,eAAL,CAAqB4F,YAArB,KAAsC,KAAKtC,UAAL,GAAkBsC,YAAxD,IACC,CAAC7F,KAAO,CAAC,KAAKC,eAAL,CAAqByB,SAAtB,EAAiC,KAAK6B,UAAL,GAAkB7B,SAAnD,CADT,IAEC,KAAKzB,eAAL,CAAqBuC,IAArB,KAA8B,KAAKe,UAAL,GAAkBf,IALlD,CADF,EAOE;AACA,WAAKhC,OAAL;AACAkD,mBAAa,GAAG,KAAK4H,gBAAL,EAAhB;AACD;;AAED,SAAKF,UAAL,CAAgB,KAAK7H,UAAL,EAAhB;AACA,SAAKkI,iBAAL;AAEA,SAAKxL,eAAL,GAAuB,KAAKsD,UAAL,EAAvB;AACA,iCAAYG,aAAZ,GAAyB;AAAEhC,eAAS,EAAE,KAAK6B,UAAL,GAAkB7B;AAA/B,KAAzB;AACD,GAtCM;;AAwCA2J,4CAAP;AACE,SAAKnL,SAAL,GAAiB,IAAjB;AACD,GAFM;;AAIAmL,uCAAP;AACE,SAAKK,eAAL;AACA,WAAO,KAAK/J,iBAAL,CAAuBC,KAA9B;AACD,GAHM;;AAKCyJ,0CAAR,UAAmB1L,OAAnB,EAAkE;AAChE,QAAI,KAAKgC,iBAAL,CAAuBC,KAAvB,IAAgC,KAAK2B,UAAL,GAAkBf,IAAlB,KAA2B,IAA/D,EAAqE;AACrE,SAAKb,iBAAL,CAAuBC,KAAvB,GAA+B,KAAKW,aAAL,GAAqBpC,MAArB,CAA4B4F,SAA5B,CAAsC;AACnEnE,WAAK,EAAEjC,OAAO,CAACkG,YADoD;AAEnEnE,eAAS,EAAE/B,OAAO,CAAC+B,SAFgD;AAGnEsD,iBAAW,EAAErF,OAAO,CAACqF;AAH8C,KAAtC,CAA/B;AAKD,GAPO;;AASAqG,iDAAR;AACE,QAAI,KAAK1J,iBAAL,CAAuBkE,YAA3B,EAAyC;AACzC,SAAKlE,iBAAL,CAAuBkE,YAAvB,GAAsC,KAAKlE,iBAAL,CAAuBC,KAAvB,CAA8BmE,SAA9B,CACpC;AACEC,UAAI,EAAE,KAAK2F,iBAAL,CAAuB3H,IAAvB,CAA4B,IAA5B,CADR;AAEEkC,WAAK,EAAE,KAAK0F,WAAL,CAAiB5H,IAAjB,CAAsB,IAAtB,CAFT;AAGE6H,cAAQ,EAAE,KAAKC,oBAAL,CAA0B9H,IAA1B,CAA+B,IAA/B;AAHZ,KADoC,CAAtC;AAOD,GATO;;AAWAqH,gDAAR;AACE,WAAO;AACLtI,aAAO,EAAE,IADJ;AAELmD,WAAK,EAAE7C,SAFF;AAGLD,UAAI,EAAEC;AAHD,KAAP;AAKD,GANO;;AAQAgI,4CAAR,UAAqB9J,MAArB,EAA+C;AAC7C,QAAI,KAAKrB,SAAT,EAAoB;AAClB,WAAKoJ,SAAL,CAAe/H,MAAf;AACD;AACF,GAJO;;AAMA8J,iDAAR,UAA0B9J,MAA1B,EAA2D;AACjD;AAER,SAAKsJ,YAAL,CAAkB;AAChBzH,UAAI,EAAE7B,MAAM,CAAC6B,IADG;AAEhBL,aAAO,EAAE,KAFO;AAGhBmD,WAAK,EAAE7C;AAHS,KAAlB;;AAMA,QAAI0I,kBAAJ,EAAwB;AACtBA,wBAAkB,CAAC;AACjB5L,cAAM,EAAE,KAAKoC,aAAL,GAAqBpC,MADZ;AAEjB6L,wBAAgB,EAAEzK;AAFD,OAAD,CAAlB;AAID;AACF,GAfO;;AAiBA8J,2CAAR,UAAoBnF,KAApB,EAA8B;AAC5B,SAAK2E,YAAL,CAAkB;AAChB3E,WAAK,OADW;AAEhBnD,aAAO,EAAE;AAFO,KAAlB;AAID,GALO;;AAOAsI,oDAAR;AACU;AACR,QAAIY,sBAAJ,EAA4BA,sBAAsB;AAClD,SAAKP,eAAL;AACD,GAJO;;AAMAL,+CAAR;AACE,QAAI,KAAK1J,iBAAL,CAAuBkE,YAA3B,EAAyC;AACvC,WAAKlE,iBAAL,CAAuBkE,YAAvB,CAAoCwB,WAApC;AACA,aAAO,KAAK1F,iBAAL,CAAuBkE,YAA9B;AACD;AACF,GALO;;AAMV;AA5IA,EAGUhG,aAHV;;SCCgBqM,gBACdrG,cACAlG,SAAoD;AAEpD,MAAMC,OAAO,GAAGyI,UAAU,CAACC,gBAAgB,EAAjB,CAA1B;AACA,MAAMG,cAAc,GAAG9I,OAAO,yBACrBA,UAAO;AAAEkG,gBAAY;AAAd,IADc,GAE1B;AAAEA,gBAAY;AAAd,GAFJ;;AAGM;iCAAA;oBAAA;;AAAA;AAAA,MAACtE,cAAD;AAAA,MAAS+H,iBAAT;;AAMN,MAAM6C,mBAAmB,GAAGlE,MAAM,EAAlC;;AACA,WAASmE,sBAAT,GAA+B;AAC7B,QAAI,CAACD,mBAAmB,CAACjE,OAAzB,EAAkC;AAChCiE,yBAAmB,CAACjE,OAApB,GAA8B,IAAImD,gBAAJ,CAAwC;AACpE1L,eAAO,EAAE8I,cAD2D;AAEpE7I,eAAO,SAF6D;AAGpE0J,iBAAS;AAH2D,OAAxC,CAA9B;AAKD;;AACD,WAAO6C,mBAAmB,CAACjE,OAA3B;AACD;;AAED,MAAM8D,gBAAgB,GAAGI,sBAAsB,EAA/C;AACAJ,kBAAgB,CAACrG,UAAjB,CAA4B8C,cAA5B,EAA4C,IAA5C;AACAuD,kBAAgB,CAACpM,OAAjB,GAA2BA,OAA3B;AAEAsJ,WAAS,CAAC;AAAM,2BAAgB,CAACC,YAAjB;AAA+B,GAAtC,CAAT;AACAD,WAAS,CAAC;AAAM,2BAAgB,CAAC1I,OAAjB,CAAyBwD,IAAzB,CAA8BgI,gBAA9B;AAA+C,GAAtD,EAAwD,EAAxD,CAAT;AAEA,SAAOA,gBAAgB,CAAC1I,OAAjB,CAAyB/B,MAAzB,CAAP;AACD;;SCpCe8K,kBAAe;AACrB;AACRjM,uJAGI,sDAHJ;AAKA,SAAOD,MAAP;AACD;;ACHD,SAASmM,oBAAT,GAA6B;AAC3B,SAAO;AACLC,QAAI,EAAE,KADD;AAELjF,cAAU,EAAE;AAFP,GAAP;AAID;;AAED;AAAA;AAEU,yBAAgB,IAAIkF,GAAJ,EAAhB;AAMA,yBAAgB,IAAIA,GAAJ,EAAhB;AAuET;;AApEQC,mDAAP,UACEnF,UADF,EAEEoF,KAFF,EAEwC;AAEtC,SAAKC,eAAL,CAAqBD,KAArB,EAA4BpF,UAA5B,GAAyCA,UAAzC;AACD,GALM;;AAQAmF,8CAAP,UACEC,KADF,EACwC;AAEtC,WAAO,KAAKC,eAAL,CAAqBD,KAArB,EAA4BpF,UAAnC;AACD,GAJM;;AAMAmF,6CAAP,UACEG,aADF,EAEEC,MAFF,EAE+B;AAE7B,QAAMC,IAAI,GAAG,KAAKH,eAAL,CAAqBC,aAAa,CAACrJ,UAAd,EAArB,CAAb;;AACA,QAAI,CAACuJ,IAAI,CAACP,IAAV,EAAgB;AACd,WAAKQ,aAAL,CAAmBC,GAAnB,CACEJ,aAAa,CAACrJ,UAAd,EADF,EAEE,IAAIqF,OAAJ,CAAY,mBAAO;AACjBC,eAAO,CAAC+D,aAAa,CAACK,SAAd,EAAD,CAAP;AACD,OAFD,CAFF;AAQA,aAAO,IAAP;AACD;;AACD,WAAOJ,MAAM,EAAb;AACD,GAjBM;;AAmBAJ,yCAAP;AACE,WAAO,KAAKM,aAAL,CAAmBG,IAAnB,GAA0B,CAAjC;AACD,GAFM;;AAIAT,qDAAP;AAAA;;AACE,QAAMU,QAAQ,GAAmB,EAAjC;AACA,SAAKJ,aAAL,CAAmBK,OAAnB,CAA2B,UAACC,OAAD,EAAUT,aAAV,EAAuB;AAUhDxL,WAAI,CAACuL,eAAL,CAAqBC,aAArB,EAAoCL,IAApC,GAA2C,IAA3C;AACAY,cAAQ,CAACG,IAAT,CAAcD,OAAd;AACD,KAZD;AAaA,SAAKN,aAAL,CAAmBQ,KAAnB;AACA,WAAO3E,OAAO,CAAC4E,GAAR,CAAYL,QAAZ,CAAP;AACD,GAjBM;;AAmBCV,6CAAR,UACEC,KADF,EACwC;AAE9B;AACA;AAAA,QAAOhL,2BAAP;AACR,QAAM+L,MAAM,GAAGC,aAAa,CAACC,GAAd,CAAkB/L,KAAlB,KAA4B,IAAI4K,GAAJ,EAA3C;AACA,QAAI,CAACkB,aAAa,CAACE,GAAd,CAAkBhM,KAAlB,CAAL,EAA+B8L,aAAa,CAACV,GAAd,CAAkBpL,KAAlB,EAAyB6L,MAAzB;AAC/B,QAAMI,eAAe,GAAGC,IAAI,CAACC,SAAL,CAAerM,SAAf,CAAxB;AACA,QAAMoL,IAAI,GAAGW,MAAM,CAACE,GAAP,CAAWE,eAAX,KAA+BvB,oBAAoB,EAAhE;AACA,QAAI,CAACmB,MAAM,CAACG,GAAP,CAAWC,eAAX,CAAL,EAAkCJ,MAAM,CAACT,GAAP,CAAWa,eAAX,EAA4Bf,IAA5B;AAClC,WAAOA,IAAP;AACD,GAXO;;AAYV;AAAC,CA/ED","names":["options","context","OperationData","newOptions","storePrevious","isEqual","previousOptions","isMounted","client","process","NODE_ENV","invariant","isNew","cleanup","document","type","operation","parser","requiredOperationName","operationName","usedOperationName","__extends","_a","onNewData","_super","_this","runLazy","lazyOptions","result","getQueryResult","startQuerySubscription","variables","currentObservable","query","refetch","fetchMoreOptions","fetchMore","mapFn","updateQuery","pollInterval","startPolling","stopPolling","subscribeToMore","QueryData","refreshClient","skip","previousData","removeQuerySubscription","updateObservableQuery","getExecuteSsrResult","getExecuteResult","runLazyQuery","loading","networkStatus","NetworkStatus","ready","called","data","undefined","execute","getOptions","ssr","obs","currentResult","getCurrentResult","_b","lazy","handleErrorOrCompleted","unmount","bind","call","__assign","renderPromises","ssrDisabled","fetchDisabled","disableNetworkFetches","ssrLoading","stale","observableQueryFields","ssrInitiated","addQueryPromise","verifyDocumentType","DocumentType","Query","displayName","fetchPolicy","metadata","reactComponent","getSSRObservable","observableQueryOptions","prepareObservableQueryOptions","children","watchQuery","registerSSRObservable","initializeObservableQuery","newObservableQueryOptions","setOptions","catch","subscription","obsQuery","subscribe","next","previousResult","error","resubscribeToQuery","hasOwnProperty","lastError","getLastError","lastResult","getLastResult","resetLastResults","Object","assign","partial","errors","length","ApolloError","graphQLErrors","partialRefetch","resetQueryStoreErrors","onCompleted","onError","unsubscribe","observable","obsRefetch","obsFetchMore","obsUpdateQuery","obsStartPolling","obsStopPolling","obsSubscribeToMore","useDeepMemo","memoFn","key","ref","useRef","current","value","useBaseQuery","useContext","getApolloContext","tick","forceUpdate","updatedOptions","queryDataRef","queryData","Promise","resolve","then","memo","executeLazy","queryResult","useEffect","afterExecute","useQuery","useLazyQuery","setResult","mutationFunctionOptions","onMutationStart","mutationId","generateNewMutationId","mutate","response","onMutationCompleted","onMutationError","mutation","Mutation","mostRecentMutationId","MutationData","runMutation","optimisticResponse","update","mutationContext","_c","awaitRefetchQueries","mutateOptions","mutateVariables","refetchQueries","ignoreResults","updateResult","callOncomplete","isMostRecentMutation","useMutation","mutationDataRef","getMutationDataRef","mutationData","initialize","SubscriptionData","getLoadingResult","shouldResubscribe","keys","startSubscription","endSubscription","updateCurrentData","updateError","complete","completeSubscription","onSubscriptionData","subscriptionData","onSubscriptionComplete","useSubscription","subscriptionDataRef","getSubscriptionDataRef","useApolloClient","makeDefaultQueryInfo","seen","Map","RenderPromises","props","lookupQueryInfo","queryInstance","finish","info","queryPromises","set","fetchData","size","promises","forEach","promise","push","clear","all","varMap","queryInfoTrie","get","has","variablesString","JSON","stringify"],"sources":["/Volumes/Nana/I_T/projects_code/react/scandiweb_task/node_modules/@apollo/react-ssr/node_modules/@apollo/react-hooks/src/data/OperationData.ts","/Volumes/Nana/I_T/projects_code/react/scandiweb_task/node_modules/@apollo/react-ssr/node_modules/@apollo/react-hooks/src/data/QueryData.ts","/Volumes/Nana/I_T/projects_code/react/scandiweb_task/node_modules/@apollo/react-ssr/node_modules/@apollo/react-hooks/src/utils/useDeepMemo.ts","/Volumes/Nana/I_T/projects_code/react/scandiweb_task/node_modules/@apollo/react-ssr/node_modules/@apollo/react-hooks/src/utils/useBaseQuery.ts","/Volumes/Nana/I_T/projects_code/react/scandiweb_task/node_modules/@apollo/react-ssr/node_modules/@apollo/react-hooks/src/useQuery.ts","/Volumes/Nana/I_T/projects_code/react/scandiweb_task/node_modules/@apollo/react-ssr/node_modules/@apollo/react-hooks/src/useLazyQuery.ts","/Volumes/Nana/I_T/projects_code/react/scandiweb_task/node_modules/@apollo/react-ssr/node_modules/@apollo/react-hooks/src/data/MutationData.ts","/Volumes/Nana/I_T/projects_code/react/scandiweb_task/node_modules/@apollo/react-ssr/node_modules/@apollo/react-hooks/src/useMutation.ts","/Volumes/Nana/I_T/projects_code/react/scandiweb_task/node_modules/@apollo/react-ssr/node_modules/@apollo/react-hooks/src/data/SubscriptionData.ts","/Volumes/Nana/I_T/projects_code/react/scandiweb_task/node_modules/@apollo/react-ssr/node_modules/@apollo/react-hooks/src/useSubscription.ts","/Volumes/Nana/I_T/projects_code/react/scandiweb_task/node_modules/@apollo/react-ssr/node_modules/@apollo/react-hooks/src/useApolloClient.ts","/Volumes/Nana/I_T/projects_code/react/scandiweb_task/node_modules/@apollo/react-ssr/node_modules/@apollo/react-hooks/src/ssr/RenderPromises.ts"],"sourcesContent":["import { ApolloClient } from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\nimport {\n  ApolloContextValue,\n  parser,\n  DocumentType,\n  operationName\n} from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { CommonOptions } from '../types';\n\nexport abstract class OperationData<TOptions = any> {\n  public isMounted: boolean = false;\n  public previousOptions: CommonOptions<TOptions> = {} as CommonOptions<\n    TOptions\n  >;\n  public context: ApolloContextValue = {};\n  public client: ApolloClient<object> | undefined;\n\n  private options: CommonOptions<TOptions> = {} as CommonOptions<TOptions>;\n\n  constructor(options?: CommonOptions<TOptions>, context?: ApolloContextValue) {\n    this.options = options || ({} as CommonOptions<TOptions>);\n    this.context = context || {};\n  }\n\n  public getOptions(): CommonOptions<TOptions> {\n    return this.options;\n  }\n\n  public setOptions(\n    newOptions: CommonOptions<TOptions>,\n    storePrevious: boolean = false\n  ) {\n    if (storePrevious && !isEqual(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this.options = newOptions;\n  }\n\n  public abstract execute(...args: any): any;\n  public abstract afterExecute(...args: any): void | (() => void);\n  public abstract cleanup(): void;\n\n  protected unmount() {\n    this.isMounted = false;\n  }\n\n  protected refreshClient() {\n    const client =\n      (this.options && this.options.client) ||\n      (this.context && this.context.client);\n\n    invariant(\n      !!client,\n      'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ' +\n        'ApolloClient instance in via options.'\n    );\n\n    let isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client as ApolloClient<object>,\n      isNew\n    };\n  }\n\n  protected verifyDocumentType(document: DocumentNode, type: DocumentType) {\n    const operation = parser(document);\n    const requiredOperationName = operationName(type);\n    const usedOperationName = operationName(operation.type);\n    invariant(\n      operation.type === type,\n      `Running a ${requiredOperationName} requires a graphql ` +\n        `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n    );\n  }\n}\n","import {\n  ApolloQueryResult,\n  ApolloError,\n  NetworkStatus,\n  FetchMoreOptions,\n  FetchMoreQueryOptions,\n  UpdateQueryOptions,\n  SubscribeToMoreOptions,\n} from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport {\n  ApolloContextValue,\n  DocumentType,\n  QueryResult,\n  ObservableQueryFields,\n} from '@apollo/react-common';\n\nimport {\n  QueryPreviousData,\n  QueryOptions,\n  QueryCurrentObservable,\n  QueryTuple,\n  QueryLazyOptions,\n} from '../types';\nimport { OperationData } from './OperationData';\n\nexport class QueryData<TData, TVariables> extends OperationData {\n  public onNewData: () => void;\n\n  private previousData: QueryPreviousData<TData, TVariables> = {};\n  private currentObservable: QueryCurrentObservable<TData, TVariables> = {};\n  private runLazy: boolean = false;\n  private lazyOptions?: QueryLazyOptions<TVariables>;\n\n  constructor({\n    options,\n    context,\n    onNewData,\n  }: {\n    options: QueryOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    onNewData: () => void;\n  }) {\n    super(options, context);\n    this.onNewData = onNewData;\n  }\n\n  public execute(): QueryResult<TData, TVariables> {\n    this.refreshClient();\n\n    const { skip, query } = this.getOptions();\n    if (skip || query !== this.previousData.query) {\n      this.removeQuerySubscription();\n      this.previousData.query = query;\n    }\n\n    this.updateObservableQuery();\n\n    if (this.isMounted) this.startQuerySubscription();\n\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  }\n\n  public executeLazy(): QueryTuple<TData, TVariables> {\n    return !this.runLazy\n      ? [\n          this.runLazyQuery,\n          {\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            called: false,\n            data: undefined,\n          } as QueryResult<TData, TVariables>,\n        ]\n      : [this.runLazyQuery, this.execute()];\n  }\n\n  // For server-side rendering\n  public fetchData(): Promise<ApolloQueryResult<any>> | boolean {\n    const options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n\n    // currentObservable.query is already assigned the registered SSR observable in initializeObservableQuery.\n    const obs = this.currentObservable.query!;\n    const currentResult = obs.getCurrentResult();\n    return currentResult.loading ? obs.result() : false;\n  }\n\n  public afterExecute({ lazy = false }: { lazy?: boolean } = {}) {\n    this.isMounted = true;\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    this.removeQuerySubscription();\n    delete this.currentObservable.query;\n    delete this.previousData.result;\n  }\n\n  public getOptions() {\n    const options = super.getOptions();\n\n    if (this.lazyOptions) {\n      options.variables = {\n        ...options.variables,\n        ...this.lazyOptions.variables,\n      };\n      options.context = {\n        ...options.context,\n        ...this.lazyOptions.context,\n      };\n    }\n\n    // skip is not supported when using lazy query execution.\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  }\n\n  public ssrInitiated() {\n    return this.context && this.context.renderPromises;\n  }\n\n  private runLazyQuery = (options?: QueryLazyOptions<TVariables>) => {\n    this.cleanup();\n    this.runLazy = true;\n    this.lazyOptions = options;\n    this.onNewData();\n  };\n\n  private getExecuteResult = (): QueryResult<TData, TVariables> => {\n    const result = this.getQueryResult();\n    this.startQuerySubscription();\n    return result;\n  };\n\n  private getExecuteSsrResult() {\n    const ssrDisabled = this.getOptions().ssr === false;\n    const fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    const ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client,\n      ...this.observableQueryFields(),\n    } as QueryResult<TData, TVariables>;\n\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previousData.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    let result;\n    if (this.ssrInitiated()) {\n      result =\n        this.context.renderPromises!.addQueryPromise(\n          this,\n          this.getExecuteResult\n        ) || ssrLoading;\n    }\n\n    return result;\n  }\n\n  private prepareObservableQueryOptions() {\n    const options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    const displayName = options.displayName || 'Query';\n\n    // Set the fetchPolicy to cache-first for network-only and cache-and-network\n    // fetches for server side renders.\n    if (\n      this.ssrInitiated() &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return {\n      ...options,\n      displayName,\n      context: options.context,\n      metadata: { reactComponent: { displayName } },\n    };\n  }\n\n  private initializeObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    if (this.ssrInitiated()) {\n      this.currentObservable.query = this.context!.renderPromises!.getSSRObservable(\n        this.getOptions()\n      );\n    }\n\n    if (!this.currentObservable.query) {\n      const observableQueryOptions = this.prepareObservableQueryOptions();\n\n      this.previousData.observableQueryOptions = {\n        ...observableQueryOptions,\n        children: null,\n      };\n      this.currentObservable.query = this.refreshClient().client.watchQuery({\n        ...observableQueryOptions,\n      });\n\n      if (this.ssrInitiated()) {\n        this.context?.renderPromises?.registerSSRObservable(\n          this.currentObservable.query,\n          observableQueryOptions\n        );\n      }\n    }\n  }\n\n  private updateObservableQuery() {\n    // If we skipped initially, we may not have yet created the observable\n    if (!this.currentObservable.query) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    const newObservableQueryOptions = {\n      ...this.prepareObservableQueryOptions(),\n      children: null,\n    };\n\n    if (\n      !isEqual(\n        newObservableQueryOptions,\n        this.previousData.observableQueryOptions\n      )\n    ) {\n      this.previousData.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable\n        .query!.setOptions(newObservableQueryOptions)\n        // The error will be passed to the child container, so we don't\n        // need to log it here. We could conceivably log something if\n        // an option was set. OTOH we don't log errors w/ the original\n        // query. See https://github.com/apollostack/react-apollo/issues/404\n        .catch(() => {});\n    }\n  }\n\n  private startQuerySubscription() {\n    if (this.currentObservable.subscription || this.getOptions().skip) return;\n\n    const obsQuery = this.currentObservable.query!;\n    this.currentObservable.subscription = obsQuery.subscribe({\n      next: ({ loading, networkStatus, data }) => {\n        const previousResult = this.previousData.result;\n\n        // Make sure we're not attempting to re-render similar results\n        if (\n          previousResult &&\n          previousResult.loading === loading &&\n          previousResult.networkStatus === networkStatus &&\n          isEqual(previousResult.data, data)\n        ) {\n          return;\n        }\n\n        this.onNewData();\n      },\n      error: (error) => {\n        this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n\n        const previousResult = this.previousData.result;\n        if (\n          (previousResult && previousResult.loading) ||\n          !isEqual(error, this.previousData.error)\n        ) {\n          this.previousData.error = error;\n          this.onNewData();\n        }\n      },\n    });\n  }\n\n  private resubscribeToQuery() {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `observableQuery` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const lastError = this.currentObservable.query!.getLastError();\n    const lastResult = this.currentObservable.query!.getLastResult();\n    this.currentObservable.query!.resetLastResults();\n    this.startQuerySubscription();\n    Object.assign(this.currentObservable.query!, {\n      lastError,\n      lastResult,\n    });\n  }\n\n  private getQueryResult(): QueryResult<TData, TVariables> {\n    let result: any = this.observableQueryFields();\n    const options = this.getOptions();\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    if (options.skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false,\n        called: true,\n      };\n    } else {\n      // Fetch the current result (if any) from the store.\n      const currentResult = this.currentObservable.query!.getCurrentResult();\n      const { loading, partial, networkStatus, errors } = currentResult;\n      let { error, data } = currentResult;\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      result = {\n        ...result,\n        loading,\n        networkStatus,\n        error,\n        called: true,\n      };\n\n      if (loading) {\n        const previousData =\n          this.previousData.result && this.previousData.result.data;\n        result.data =\n          previousData && data\n            ? {\n                ...previousData,\n                ...data,\n              }\n            : previousData || data;\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.query!.getLastResult() || ({} as any))\n            .data,\n        });\n      } else {\n        const { fetchPolicy } = this.currentObservable.query!.options;\n        const { partialRefetch } = options;\n        if (\n          partialRefetch &&\n          !data &&\n          partial &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as `undefined` since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading,\n          });\n          result.refetch();\n          return result;\n        }\n\n        result.data = data;\n      }\n    }\n\n    result.client = this.client;\n    this.previousData.loading =\n      (this.previousData.result && this.previousData.result.loading) || false;\n    this.previousData.result = result;\n\n    // Any query errors that exist are now available in `result`, so we'll\n    // remove the original errors from the `ObservableQuery` query store to\n    // make sure they aren't re-displayed on subsequent (potentially error\n    // free) requests/responses.\n    this.currentObservable.query &&\n      this.currentObservable.query.resetQueryStoreErrors();\n\n    return result;\n  }\n\n  private handleErrorOrCompleted() {\n    const obsQuery = this.currentObservable.query;\n    if (!obsQuery || !this.previousData.result) return;\n\n    const { data, loading, error } = this.previousData.result;\n\n    if (!loading) {\n      const { query, variables, onCompleted, onError } = this.getOptions();\n\n      // No changes, so we won't call onError/onCompleted.\n      if (\n        this.previousOptions &&\n        !this.previousData.loading &&\n        isEqual(this.previousOptions.query, query) &&\n        isEqual(this.previousOptions.variables, variables)\n      ) {\n        return;\n      }\n\n      if (onCompleted && !error) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  }\n\n  private removeQuerySubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n\n  private obsRefetch = (variables?: TVariables) =>\n    this.currentObservable.query!.refetch(variables);\n\n  private obsFetchMore = <K extends keyof TVariables>(\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, K> &\n      FetchMoreOptions<TData, TVariables>\n  ) => this.currentObservable.query!.fetchMore(fetchMoreOptions);\n\n  private obsUpdateQuery = <TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVars>\n    ) => TData\n  ) => this.currentObservable.query!.updateQuery(mapFn);\n\n  private obsStartPolling = (pollInterval: number) => {\n    this.currentObservable &&\n      this.currentObservable.query! &&\n      this.currentObservable.query!.startPolling(pollInterval);\n  };\n\n  private obsStopPolling = () => {\n    this.currentObservable &&\n      this.currentObservable.query! &&\n      this.currentObservable.query!.stopPolling();\n  };\n\n  private obsSubscribeToMore = <\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) => this.currentObservable.query!.subscribeToMore(options);\n\n  private observableQueryFields() {\n    const observable = this.currentObservable.query!;\n    return {\n      variables: observable.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore,\n    } as ObservableQueryFields<TData, TVariables>;\n  }\n}\n","import { useRef } from 'react';\nimport { equal as isEqual } from '@wry/equality';\n\n/**\n * Memoize a result using deep equality. This hook has two advantages over\n * React.useMemo: it uses deep equality to compare memo keys, and it guarantees\n * that the memo function will only be called if the keys are unequal.\n * React.useMemo cannot be relied on to do this, since it is only a performance\n * optimization (see https://reactjs.org/docs/hooks-reference.html#usememo).\n */\nexport function useDeepMemo<TKey, TValue>(\n  memoFn: () => TValue,\n  key: TKey\n): TValue {\n  const ref = useRef<{ key: TKey; value: TValue }>();\n\n  if (!ref.current || !isEqual(key, ref.current.key)) {\n    ref.current = { key, value: memoFn() };\n  }\n\n  return ref.current.value;\n}\n","import { useContext, useEffect, useReducer, useRef } from 'react';\nimport {\n  getApolloContext,\n  OperationVariables,\n  QueryResult,\n} from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { QueryHookOptions, QueryOptions, QueryTuple } from '../types';\nimport { QueryData } from '../data/QueryData';\nimport { useDeepMemo } from './useDeepMemo';\n\nexport function useBaseQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: QueryHookOptions<TData, TVariables>,\n  lazy = false\n) {\n  const context = useContext(getApolloContext());\n  const [tick, forceUpdate] = useReducer((x) => x + 1, 0);\n  const updatedOptions = options ? { ...options, query } : { query };\n\n  const queryDataRef = useRef<QueryData<TData, TVariables>>();\n  const queryData =\n    queryDataRef.current ||\n    new QueryData<TData, TVariables>({\n      options: updatedOptions as QueryOptions<TData, TVariables>,\n      context,\n      onNewData() {\n        if (!queryData.ssrInitiated()) {\n          // When new data is received from the `QueryData` object, we want to\n          // force a re-render to make sure the new data is displayed. We can't\n          // force that re-render if we're already rendering however so to be\n          // safe we'll trigger the re-render in a microtask.\n          Promise.resolve().then(forceUpdate);\n        } else {\n          // If we're rendering on the server side we can force an update at\n          // any point.\n          forceUpdate();\n        }\n      },\n    });\n\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  // SSR won't trigger the effect hook below that stores the current\n  // `QueryData` instance for future renders, so we'll handle that here if\n  // the current render is happening server side.\n  if (queryData.ssrInitiated() && !queryDataRef.current) {\n    queryDataRef.current = queryData;\n  }\n\n  // `onError` and `onCompleted` callback functions will not always have a\n  // stable identity, so we'll exclude them from the memoization key to\n  // prevent `afterExecute` from being triggered un-necessarily.\n  const memo = {\n    options: { ...updatedOptions, onError: undefined, onCompleted: undefined },\n    context,\n    tick,\n  };\n\n  const result = useDeepMemo(\n    () => (lazy ? queryData.executeLazy() : queryData.execute()),\n    memo\n  );\n\n  const queryResult = lazy\n    ? (result as QueryTuple<TData, TVariables>)[1]\n    : (result as QueryResult<TData, TVariables>);\n\n  useEffect(() => {\n    // We only need one instance of the `QueryData` class, so we'll store it\n    // as a ref to make it available on subsequent renders.\n    if (!queryDataRef.current) {\n      queryDataRef.current = queryData;\n    }\n\n    return () => queryData.cleanup();\n  }, []);\n\n  useEffect(() => queryData.afterExecute({ lazy }), [\n    queryResult.loading,\n    queryResult.networkStatus,\n    queryResult.error,\n    queryResult.data,\n  ]);\n\n  return result;\n}\n","import { OperationVariables, QueryResult } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { QueryHookOptions } from './types';\nimport { useBaseQuery } from './utils/useBaseQuery';\n\nexport function useQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: QueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, false) as QueryResult<\n    TData,\n    TVariables\n  >;\n}\n","import { OperationVariables } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { LazyQueryHookOptions, QueryTuple } from './types';\nimport { useBaseQuery } from './utils/useBaseQuery';\n\nexport function useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: LazyQueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, true) as QueryTuple<\n    TData,\n    TVariables\n  >;\n}\n","import { ApolloError } from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport {\n  ApolloContextValue,\n  DocumentType,\n  OperationVariables,\n  ExecutionResult,\n  MutationFunctionOptions,\n  MutationResult\n} from '@apollo/react-common';\n\nimport { MutationOptions, MutationTuple } from '../types';\nimport { OperationData } from './OperationData';\n\nexport class MutationData<\n  TData = any,\n  TVariables = OperationVariables\n> extends OperationData {\n  private mostRecentMutationId: number;\n  private result: MutationResult<TData>;\n  private previousResult?: MutationResult<TData>;\n  private setResult: (result: MutationResult<TData>) => any;\n\n  constructor({\n    options,\n    context,\n    result,\n    setResult\n  }: {\n    options: MutationOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    result: MutationResult<TData>;\n    setResult: (result: MutationResult<TData>) => any;\n  }) {\n    super(options, context);\n    this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n    this.result = result;\n    this.setResult = setResult;\n    this.mostRecentMutationId = 0;\n  }\n\n  public execute(result: MutationResult<TData>) {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    result.client = this.refreshClient().client;\n    return [this.runMutation, result] as MutationTuple<TData, TVariables>;\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    // No cleanup required.\n  }\n\n  private runMutation = (\n    mutationFunctionOptions: MutationFunctionOptions<\n      TData,\n      TVariables\n    > = {} as MutationFunctionOptions<TData, TVariables>\n  ) => {\n    this.onMutationStart();\n    const mutationId = this.generateNewMutationId();\n\n    return this.mutate(mutationFunctionOptions)\n      .then((response: ExecutionResult<TData>) => {\n        this.onMutationCompleted(response, mutationId);\n        return response;\n      })\n      .catch((error: ApolloError) => {\n        this.onMutationError(error, mutationId);\n        if (!this.getOptions().onError) throw error;\n      });\n  };\n\n  private mutate(\n    mutationFunctionOptions: MutationFunctionOptions<TData, TVariables>\n  ) {\n    const {\n      mutation,\n      variables,\n      optimisticResponse,\n      update,\n      context: mutationContext = {},\n      awaitRefetchQueries = false,\n      fetchPolicy\n    } = this.getOptions();\n    const mutateOptions = { ...mutationFunctionOptions };\n\n    const mutateVariables = Object.assign(\n      {},\n      variables,\n      mutateOptions.variables\n    );\n    delete mutateOptions.variables;\n\n    return this.refreshClient().client.mutate({\n      mutation,\n      optimisticResponse,\n      refetchQueries:\n        mutateOptions.refetchQueries || this.getOptions().refetchQueries,\n      awaitRefetchQueries,\n      update,\n      context: mutationContext,\n      fetchPolicy,\n      variables: mutateVariables,\n      ...mutateOptions\n    });\n  }\n\n  private onMutationStart() {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private onMutationCompleted(\n    response: ExecutionResult<TData>,\n    mutationId: number\n  ) {\n    const { onCompleted, ignoreResults } = this.getOptions();\n\n    const { data, errors } = response;\n    const error =\n      errors && errors.length > 0\n        ? new ApolloError({ graphQLErrors: errors })\n        : undefined;\n\n    const callOncomplete = () =>\n      onCompleted ? onCompleted(data as TData) : null;\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data,\n        error\n      });\n    }\n    callOncomplete();\n  }\n\n  private onMutationError(error: ApolloError, mutationId: number) {\n    const { onError } = this.getOptions();\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    if (onError) {\n      onError(error);\n    }\n  }\n\n  private generateNewMutationId(): number {\n    return ++this.mostRecentMutationId;\n  }\n\n  private isMostRecentMutation(mutationId: number) {\n    return this.mostRecentMutationId === mutationId;\n  }\n\n  private updateResult(result: MutationResult<TData>) {\n    if (\n      this.isMounted &&\n      (!this.previousResult || !isEqual(this.previousResult, result))\n    ) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  }\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { getApolloContext, OperationVariables } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { MutationHookOptions, MutationTuple } from './types';\nimport { MutationData } from './data/MutationData';\n\nexport function useMutation<TData = any, TVariables = OperationVariables>(\n  mutation: DocumentNode,\n  options?: MutationHookOptions<TData, TVariables>\n): MutationTuple<TData, TVariables> {\n  const context = useContext(getApolloContext());\n  const [result, setResult] = useState({ called: false, loading: false });\n  const updatedOptions = options ? { ...options, mutation } : { mutation };\n\n  const mutationDataRef = useRef<MutationData<TData, TVariables>>();\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        result,\n        setResult\n      });\n    }\n    return mutationDataRef.current;\n  }\n\n  const mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n\n  useEffect(() => mutationData.afterExecute());\n\n  return mutationData.execute(result);\n}\n","import { equal as isEqual } from '@wry/equality';\nimport { ApolloContextValue, SubscriptionResult } from '@apollo/react-common';\n\nimport { OperationData } from './OperationData';\nimport { SubscriptionCurrentObservable, SubscriptionOptions } from '../types';\n\nexport class SubscriptionData<\n  TData = any,\n  TVariables = any\n> extends OperationData<SubscriptionOptions<TData, TVariables>> {\n  private setResult: any;\n  private currentObservable: SubscriptionCurrentObservable = {};\n\n  constructor({\n    options,\n    context,\n    setResult\n  }: {\n    options: SubscriptionOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    setResult: any;\n  }) {\n    super(options, context);\n    this.setResult = setResult;\n    this.initialize(options);\n  }\n\n  public execute(result: SubscriptionResult<TData>) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n\n    let currentResult = result;\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    let { shouldResubscribe } = this.getOptions();\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (\n      shouldResubscribe !== false &&\n      this.previousOptions &&\n      Object.keys(this.previousOptions).length > 0 &&\n      (this.previousOptions.subscription !== this.getOptions().subscription ||\n        !isEqual(this.previousOptions.variables, this.getOptions().variables) ||\n        this.previousOptions.skip !== this.getOptions().skip)\n    ) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n\n    this.previousOptions = this.getOptions();\n    return { ...currentResult, variables: this.getOptions().variables };\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n  }\n\n  public cleanup() {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  }\n\n  private initialize(options: SubscriptionOptions<TData, TVariables>) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  }\n\n  private startSubscription() {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query!.subscribe(\n      {\n        next: this.updateCurrentData.bind(this),\n        error: this.updateError.bind(this),\n        complete: this.completeSubscription.bind(this)\n      }\n    );\n  }\n\n  private getLoadingResult() {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  }\n\n  private updateResult(result: SubscriptionResult) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  }\n\n  private updateCurrentData(result: SubscriptionResult<TData>) {\n    const { onSubscriptionData } = this.getOptions();\n\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  }\n\n  private updateError(error: any) {\n    this.updateResult({\n      error,\n      loading: false\n    });\n  }\n\n  private completeSubscription() {\n    const { onSubscriptionComplete } = this.getOptions();\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  }\n\n  private endSubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { getApolloContext, OperationVariables } from '@apollo/react-common';\n\nimport { SubscriptionHookOptions } from './types';\nimport { SubscriptionData } from './data/SubscriptionData';\n\nexport function useSubscription<TData = any, TVariables = OperationVariables>(\n  subscription: DocumentNode,\n  options?: SubscriptionHookOptions<TData, TVariables>\n) {\n  const context = useContext(getApolloContext());\n  const updatedOptions = options\n    ? { ...options, subscription }\n    : { subscription };\n  const [result, setResult] = useState({\n    loading: !updatedOptions.skip,\n    error: undefined,\n    data: undefined\n  });\n\n  const subscriptionDataRef = useRef<SubscriptionData<TData, TVariables>>();\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        setResult\n      });\n    }\n    return subscriptionDataRef.current;\n  }\n\n  const subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n\n  useEffect(() => subscriptionData.afterExecute());\n  useEffect(() => subscriptionData.cleanup.bind(subscriptionData), []);\n\n  return subscriptionData.execute(result);\n}\n","import React from 'react';\nimport { invariant } from 'ts-invariant';\nimport { getApolloContext } from '@apollo/react-common';\nimport ApolloClient from 'apollo-client';\n\nexport function useApolloClient(): ApolloClient<object> {\n  const { client } = React.useContext(getApolloContext());\n  invariant(\n    client,\n    'No Apollo Client instance can be found. Please ensure that you ' +\n      'have called `ApolloProvider` higher up in your tree.'\n  );\n  return client!;\n}\n","import { ObservableQuery } from 'apollo-client';\nimport { QueryOptions } from '../types';\nimport { DocumentNode } from 'graphql';\nimport { QueryData } from '../data/QueryData';\n\ntype QueryInfo = {\n  seen: boolean;\n  observable: ObservableQuery<any, any> | null;\n};\n\nfunction makeDefaultQueryInfo(): QueryInfo {\n  return {\n    seen: false,\n    observable: null\n  };\n}\n\nexport class RenderPromises {\n  // Map from Query component instances to pending fetchData promises.\n  private queryPromises = new Map<QueryOptions<any, any>, Promise<any>>();\n\n  // Two-layered map from (query document, stringified variables) to QueryInfo\n  // objects. These QueryInfo objects are intended to survive through the whole\n  // getMarkupFromTree process, whereas specific Query instances do not survive\n  // beyond a single call to renderToStaticMarkup.\n  private queryInfoTrie = new Map<DocumentNode, Map<string, QueryInfo>>();\n\n  // Registers the server side rendered observable.\n  public registerSSRObservable<TData, TVariables>(\n    observable: ObservableQuery<any, TVariables>,\n    props: QueryOptions<TData, TVariables>\n  ) {\n    this.lookupQueryInfo(props).observable = observable;\n  }\n\n  // Get's the cached observable that matches the SSR Query instances query and variables.\n  public getSSRObservable<TData, TVariables>(\n    props: QueryOptions<TData, TVariables>\n  ) {\n    return this.lookupQueryInfo(props).observable;\n  }\n\n  public addQueryPromise<TData, TVariables>(\n    queryInstance: QueryData<TData, TVariables>,\n    finish: () => React.ReactNode\n  ): React.ReactNode {\n    const info = this.lookupQueryInfo(queryInstance.getOptions());\n    if (!info.seen) {\n      this.queryPromises.set(\n        queryInstance.getOptions(),\n        new Promise(resolve => {\n          resolve(queryInstance.fetchData());\n        })\n      );\n      // Render null to abandon this subtree for this rendering, so that we\n      // can wait for the data to arrive.\n      return null;\n    }\n    return finish();\n  }\n\n  public hasPromises() {\n    return this.queryPromises.size > 0;\n  }\n\n  public consumeAndAwaitPromises() {\n    const promises: Promise<any>[] = [];\n    this.queryPromises.forEach((promise, queryInstance) => {\n      // Make sure we never try to call fetchData for this query document and\n      // these variables again. Since the queryInstance objects change with\n      // every rendering, deduplicating them by query and variables is the\n      // best we can do. If a different Query component happens to have the\n      // same query document and variables, it will be immediately rendered\n      // by calling finish() in addQueryPromise, which could result in the\n      // rendering of an unwanted loading state, but that's not nearly as bad\n      // as getting stuck in an infinite rendering loop because we kept calling\n      // queryInstance.fetchData for the same Query component indefinitely.\n      this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  }\n\n  private lookupQueryInfo<TData, TVariables>(\n    props: QueryOptions<TData, TVariables>\n  ): QueryInfo {\n    const { queryInfoTrie } = this;\n    const { query, variables } = props;\n    const varMap = queryInfoTrie.get(query) || new Map<string, QueryInfo>();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    const variablesString = JSON.stringify(variables);\n    const info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}