{"ast":null,"code":"var _jsxFileName = \"/Volumes/Nana/I_T/projects_code/react/scandiweb_task/src/components/Products.js\";\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose, graphql } from 'react-apollo';\nimport { Query } from 'react-apollo';\nimport { gql } from 'graphql-tag';\nimport styled from 'styled-components';\nimport CategoryName from './CategoryName';\nimport Product from './Product';\nimport ProductPage from '../Pages/ProductPage';\nimport { GET_CATEGORIES } from './Data';\nimport { params } from 'react-router-dom';\nimport { axios } from 'axios'; // const CATEGORIES_QUERY = gql`\n//     query CategoriesQuery($id: String!){ \n//         product(id: $id){\n//             inStock\n//             id\n//             description\n//             name\n//             gallery\n//             }\n//         }\n// `\n// const PRODUCT_QUERY = gql`\n//     query productQuery($id: String!){ \n//         product(id: $id){\n//           name\n//           id\n//           description\n//           brand\n//           inStock\n//           category\n//           attributes{\n//             name\n//             id\n//             type\n//           }\n//           }\n//         }\n// `\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PRODUCT_QUERY = gql`\n    query productQuery($title: String!){ \n        category(input: {title: $title}){\n          name\n          products{\n            inStock\n            name\n            id\n            brand\n            description\n            gallery\n          }\n      }\n    }\n`; // ($name: String!)\n// (name: $name)\n\nexport class Products extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      clothes: []\n    };\n  }\n\n  // changeOrder = (title) => {\n  //   // const { allItemQuery } = this.props\n  //   const { category } = this.props\n  //   const result = category({ variables: { title: 'clothes' } })\n  //   //Set state or store filter data\n  //   this.setState({clothes_data: result})\n  // };\n  componentDidMount() {\n    /*#__PURE__*/\n    _jsxDEV(Query, {\n      query: PRODUCT_QUERY,\n      variables: {\n        title: \"clothes\"\n      },\n      children: _ref => {\n        let {\n          data,\n          loading,\n          error\n        } = _ref;\n        if (loading) return /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Loading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 35\n        }, this);\n        if (error) console.log(error.message); // console.log(data.category)\n        // const catego = data.category\n        // const filterClothes = (title) => {\n        //   // const { allItemQuery } = this.props\n        //   // const { category } = this.props\n        //   const result = data.category({ variables: { title: 'clothes' } })\n        //   //Set state or store filter data\n        //   this.setState({clothes_data: result})\n        // };\n        // const filterClothes = (cat) => {\n        //   const results = data.categories.filter((catIte) => {\n        //     return catIte.name === cat ? console.log(catIte.name) : 'No'\n        //   })\n        //   this.setState({clothes_data: results})\n        // }\n\n        return /*#__PURE__*/_jsxDEV(Wrap, {\n          children: data.category.products.map(prod => /*#__PURE__*/_jsxDEV(Product, {\n            prod: prod\n          }, prod.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 22\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }, this);\n  }\n\n  render() {\n    let {\n      category\n    } = this.props;\n    let {\n      name\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(Container, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nexport default Products;\nconst Container = styled.div`\n  // display: flex;\n  padding: 10px;\n`;\n_c = Container;\nconst Wrap = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin-left: 20px;\n`;\n_c2 = Wrap;\nconst Button = styled.div`\n  font-weight: 600;\n  color: white;\n  background-color: #5ECE7B;\n  height: 40px;\n  width: 250px;\n  display: flex;\n  justify-content: center;\n  border-radius: 3px; \n  opacity: 0.85;\n  font-size: 13px;\n  cursor: pointer;\n  margin-top: 20px;\n  align-items: center;  \n  `; // send the category name to top left of the container\n// const CatContainer = styled.div`\n//   height: 50px;\n//   padding: 20px;\n// `\n// const CatWrap = styled.div`\n//   font-size: 30px;\n//   font-weight: 100;\n// `\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Wrap\");","map":{"version":3,"sources":["/Volumes/Nana/I_T/projects_code/react/scandiweb_task/src/components/Products.js"],"names":["React","Component","Fragment","PropTypes","compose","graphql","Query","gql","styled","CategoryName","Product","ProductPage","GET_CATEGORIES","params","axios","PRODUCT_QUERY","Products","state","clothes","componentDidMount","title","data","loading","error","console","log","message","category","products","map","prod","id","render","props","name","Container","div","Wrap","Button"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,cAAjC;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,GAAT,QAAoB,aAApB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,YAAP,MAA0B,gBAA1B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,SAASC,cAAT,QAA+B,QAA/B;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,KAAT,QAAsB,OAAtB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMC,aAAa,GAAGR,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAdA,C,CAeA;AACA;;AAEA,OAAO,MAAMS,QAAN,SAAuBf,SAAvB,CAAiC;AAAA;AAAA;AAAA,SACtCgB,KADsC,GAChC;AACJC,MAAAA,OAAO,EAAE;AADL,KADgC;AAAA;;AAKtC;AACA;AACA;AACA;AACA;AACA;AACA;AAEAC,EAAAA,iBAAiB,GAAE;AACjB;AAAA,YAAC,KAAD;AAAO,MAAA,KAAK,EAAEJ,aAAd;AAA6B,MAAA,SAAS,EAAE;AAACK,QAAAA,KAAK,EAAE;AAAR,OAAxC;AAAA,gBAEQ,QAA8B;AAAA,YAA7B;AAAEC,UAAAA,IAAF;AAAQC,UAAAA,OAAR;AAAiBC,UAAAA;AAAjB,SAA6B;AAC5B,YAAID,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AACb,YAAIC,KAAJ,EAAWC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB,EAFiB,CAG5B;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAAO,QAAC,IAAD;AAAA,oBAIHL,IAAI,CAACM,QAAL,CAAcC,QAAd,CAAuBC,GAAvB,CAA2BC,IAAI,iBAC7B,QAAC,OAAD;AAAuB,YAAA,IAAI,EAAEA;AAA7B,aAAcA,IAAI,CAACC,EAAnB;AAAA;AAAA;AAAA;AAAA,kBADF;AAJG;AAAA;AAAA;AAAA;AAAA,gBAAP;AASD;AAhCT;AAAA;AAAA;AAAA;AAAA;AAmCD;;AAEDC,EAAAA,MAAM,GAAG;AACP,QAAI;AAAEL,MAAAA;AAAF,QAAe,KAAKM,KAAxB;AACA,QAAI;AAAEC,MAAAA;AAAF,QAAW,KAAKD,KAApB;AAEA,wBACE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AA7DqC;AAgExC,eAAejB,QAAf;AAEA,MAAMmB,SAAS,GAAG3B,MAAM,CAAC4B,GAAI;AAC7B;AACA;AACA,CAHA;KAAMD,S;AAIN,MAAME,IAAI,GAAG7B,MAAM,CAAC4B,GAAI;AACxB;AACA;AACA;AACA,CAJA;MAAMC,I;AAKN,MAAMC,MAAM,GAAG9B,MAAM,CAAC4B,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAdA,C,CAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport { compose, graphql } from 'react-apollo'\nimport { Query } from 'react-apollo'\nimport { gql } from 'graphql-tag'\nimport styled from 'styled-components'\nimport CategoryName  from './CategoryName';\nimport Product from './Product'\nimport ProductPage from '../Pages/ProductPage'\nimport { GET_CATEGORIES } from './Data'\nimport { params } from 'react-router-dom';\nimport { axios } from 'axios'\n\n// const CATEGORIES_QUERY = gql`\n//     query CategoriesQuery($id: String!){ \n//         product(id: $id){\n//             inStock\n//             id\n//             description\n//             name\n//             gallery\n//             }\n//         }\n// `\n\n// const PRODUCT_QUERY = gql`\n//     query productQuery($id: String!){ \n//         product(id: $id){\n//           name\n//           id\n//           description\n//           brand\n//           inStock\n//           category\n//           attributes{\n//             name\n//             id\n//             type\n//           }\n//           }\n//         }\n// `\n\nconst PRODUCT_QUERY = gql`\n    query productQuery($title: String!){ \n        category(input: {title: $title}){\n          name\n          products{\n            inStock\n            name\n            id\n            brand\n            description\n            gallery\n          }\n      }\n    }\n`\n// ($name: String!)\n// (name: $name)\n\nexport class Products extends Component { \n  state={\n    clothes: []\n  }\n\n  // changeOrder = (title) => {\n  //   // const { allItemQuery } = this.props\n  //   const { category } = this.props\n  //   const result = category({ variables: { title: 'clothes' } })\n  //   //Set state or store filter data\n  //   this.setState({clothes_data: result})\n  // };\n\n  componentDidMount(){\n    <Query query={PRODUCT_QUERY} variables={{title: \"clothes\"}}>\n          {\n            ({ data, loading, error }) => {\n              if (loading) return <h4>Loading</h4>\n              if (error) console.log(error.message)\n              // console.log(data.category)\n              // const catego = data.category\n\n              // const filterClothes = (title) => {\n              //   // const { allItemQuery } = this.props\n              //   // const { category } = this.props\n              //   const result = data.category({ variables: { title: 'clothes' } })\n              //   //Set state or store filter data\n              //   this.setState({clothes_data: result})\n              // };\n\n              // const filterClothes = (cat) => {\n              //   const results = data.categories.filter((catIte) => {\n              //     return catIte.name === cat ? console.log(catIte.name) : 'No'\n              //   })\n              //   this.setState({clothes_data: results})\n              // }\n\n              return <Wrap>\n                {/* <Product gallery={gallery}/> */}\n                {/* <Button onClick={()=>{filterClothes(\"tech\")}}>Clothes</Button> */}\n                { \n                  data.category.products.map(prod => (\n                    <Product key={prod.id} prod={prod} />\n                  ))\n                }\n              </Wrap>\n            }\n          }\n        </Query>\n  }\n\n  render() {\n    let { category } = this.props\n    let { name } = this.props\n\n    return (      \n      <Container>\n        {/* <Button onClick={()=>{this.changeOrder(\"clothes\")}}>Newest</Button> */}\n        \n      </Container>\n    )\n  }\n}\n\nexport default Products\n\nconst Container = styled.div`\n  // display: flex;\n  padding: 10px;\n`\nconst Wrap = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin-left: 20px;\n`\nconst Button = styled.div`\n  font-weight: 600;\n  color: white;\n  background-color: #5ECE7B;\n  height: 40px;\n  width: 250px;\n  display: flex;\n  justify-content: center;\n  border-radius: 3px; \n  opacity: 0.85;\n  font-size: 13px;\n  cursor: pointer;\n  margin-top: 20px;\n  align-items: center;  \n  `\n\n// send the category name to top left of the container\n// const CatContainer = styled.div`\n//   height: 50px;\n//   padding: 20px;\n// `\n// const CatWrap = styled.div`\n//   font-size: 30px;\n//   font-weight: 100;\n// `"]},"metadata":{},"sourceType":"module"}