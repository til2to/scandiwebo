{"ast":null,"code":"import { __assign } from 'tslib';\nimport React from 'react';\nimport { getApolloContext } from '@apollo/react-common';\nimport { RenderPromises } from '@apollo/react-hooks';\n\nfunction getDataFromTree(tree, context) {\n  if (context === void 0) {\n    context = {};\n  }\n\n  return getMarkupFromTree({\n    tree: tree,\n    context: context,\n    renderFunction: require('react-dom/server').renderToStaticMarkup\n  });\n}\n\nfunction getMarkupFromTree(_a) {\n  var tree = _a.tree,\n      _b = _a.context,\n      context = _b === void 0 ? {} : _b,\n      _c = _a.renderFunction,\n      renderFunction = _c === void 0 ? require('react-dom/server').renderToStaticMarkup : _c;\n  var renderPromises = new RenderPromises();\n\n  function process() {\n    var ApolloContext = getApolloContext();\n    var html = renderFunction(React.createElement(ApolloContext.Provider, {\n      value: __assign(__assign({}, context), {\n        renderPromises: renderPromises\n      })\n    }, tree));\n    return renderPromises.hasPromises() ? renderPromises.consumeAndAwaitPromises().then(process) : html;\n  }\n\n  return Promise.resolve().then(process);\n}\n\nfunction renderToStringWithData(component) {\n  return getMarkupFromTree({\n    tree: component,\n    renderFunction: require('react-dom/server').renderToString\n  });\n}\n\nexport { getDataFromTree, getMarkupFromTree, renderToStringWithData };","map":{"version":3,"mappings":";;;;;SAIgBA,gBACdC,MACAC,SAAoC;AAApC;AAAAA;AAAoC;;AAEpC,SAAOC,iBAAiB,CAAC;AACvBF,QAAI,MADmB;AAEvBC,WAAO,SAFgB;AAKvBE,kBAAc,EAAEC,OAAO,CAAC,kBAAD,CAAP,CAA4BC;AALrB,GAAD,CAAxB;AAOD;;AAQD,SAAgBH,iBAAhB,CAAkCI,EAAlC,EAO2B;MANzBN;MACAO;MAAAN;MAIAO;MAAAL;AAEA,MAAMM,cAAc,GAAG,IAAIC,cAAJ,EAAvB;;AAEA,WAASC,OAAT,GAAgB;AAMd,QAAMC,aAAa,GAAGC,gBAAgB,EAAtC;AACA,QAAMC,IAAI,GAAGX,cAAc,CACzBY,KAAK,CAACC,aAAN,CACEJ,aAAa,CAACK,QADhB,EAEE;AAAEC,WAAK,wBAAOjB,OAAP,GAAc;AAAEQ,sBAAc;AAAhB,OAAd;AAAP,KAFF,EAGET,IAHF,CADyB,CAA3B;AAQA,WAAOS,cAAc,CAACU,WAAf,KACHV,cAAc,CAACW,uBAAf,GAAyCC,IAAzC,CAA8CV,OAA9C,CADG,GAEHG,IAFJ;AAGD;;AAED,SAAOQ,OAAO,CAACC,OAAR,GAAkBF,IAAlB,CAAuBV,OAAvB,CAAP;AACD;;SCnDea,uBACdC,WAA4B;AAE5B,SAAOvB,iBAAiB,CAAC;AACvBF,QAAI,EAAEyB,SADiB;AAEvBtB,kBAAc,EAAEC,OAAO,CAAC,kBAAD,CAAP,CAA4BsB;AAFrB,GAAD,CAAxB;AAID","names":["getDataFromTree","tree","context","getMarkupFromTree","renderFunction","require","renderToStaticMarkup","_a","_b","_c","renderPromises","RenderPromises","process","ApolloContext","getApolloContext","html","React","createElement","Provider","value","hasPromises","consumeAndAwaitPromises","then","Promise","resolve","renderToStringWithData","component","renderToString"],"sources":["/Volumes/Nana/I_T/projects_code/react/scandiweb_task/node_modules/react-apollo/node_modules/@apollo/react-ssr/src/getDataFromTree.ts","/Volumes/Nana/I_T/projects_code/react/scandiweb_task/node_modules/react-apollo/node_modules/@apollo/react-ssr/src/renderToStringWithData.ts"],"sourcesContent":["import React from 'react';\nimport { getApolloContext } from '@apollo/react-common';\nimport { RenderPromises } from '@apollo/react-hooks';\n\nexport function getDataFromTree(\n  tree: React.ReactNode,\n  context: { [key: string]: any } = {}\n) {\n  return getMarkupFromTree({\n    tree,\n    context,\n    // If you need to configure this renderFunction, call getMarkupFromTree\n    // directly instead of getDataFromTree.\n    renderFunction: require('react-dom/server').renderToStaticMarkup\n  });\n}\n\nexport type GetMarkupFromTreeOptions = {\n  tree: React.ReactNode;\n  context?: { [key: string]: any };\n  renderFunction?: (tree: React.ReactElement<any>) => string;\n};\n\nexport function getMarkupFromTree({\n  tree,\n  context = {},\n  // The rendering function is configurable! We use renderToStaticMarkup as\n  // the default, because it's a little less expensive than renderToString,\n  // and legacy usage of getDataFromTree ignores the return value anyway.\n  renderFunction = require('react-dom/server').renderToStaticMarkup\n}: GetMarkupFromTreeOptions): Promise<string> {\n  const renderPromises = new RenderPromises();\n\n  function process(): Promise<string> | string {\n    // Always re-render from the rootElement, even though it might seem\n    // better to render the children of the component responsible for the\n    // promise, because it is not possible to reconstruct the full context\n    // of the original rendering (including all unknown context provider\n    // elements) for a subtree of the original component tree.\n    const ApolloContext = getApolloContext();\n    const html = renderFunction(\n      React.createElement(\n        ApolloContext.Provider,\n        { value: { ...context, renderPromises } },\n        tree\n      )\n    );\n\n    return renderPromises.hasPromises()\n      ? renderPromises.consumeAndAwaitPromises().then(process)\n      : html;\n  }\n\n  return Promise.resolve().then(process);\n}\n","import { ReactElement } from 'react';\nimport { getMarkupFromTree } from './getDataFromTree';\n\nexport function renderToStringWithData(\n  component: ReactElement<any>\n): Promise<string> {\n  return getMarkupFromTree({\n    tree: component,\n    renderFunction: require('react-dom/server').renderToString\n  });\n}\n"]},"metadata":{},"sourceType":"module"}