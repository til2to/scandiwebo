{"ast":null,"code":"var _jsxFileName = \"/Volumes/Nana/I_T/projects_code/react/scandiweb_task/src/components/Product.js\";\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Query } from 'react-apollo';\nimport { gql } from 'graphql-tag';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PRODUCT_QUERY = gql`\n    query productQuery($title: String!){ \n        category(input: {title: $title}){\n          name\n          products{\n            inStock\n            name\n            id\n            brand\n            description\n            gallery\n          }\n      }\n    }\n`;\nexport class Product extends Component {\n  render() {\n    const {\n      name\n    } = this.props.match.params;\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Query, {\n        query: PRODUCT_QUERY,\n        variables: {\n          title: name\n        },\n        children: _ref => {\n          let {\n            loading,\n            data,\n            error\n          } = _ref;\n          if (loading) return h1;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nProduct.propTypes = {};\nexport default Product;","map":{"version":3,"sources":["/Volumes/Nana/I_T/projects_code/react/scandiweb_task/src/components/Product.js"],"names":["React","Component","Fragment","PropTypes","Query","gql","PRODUCT_QUERY","Product","render","name","props","match","params","title","loading","data","error","h1","propTypes"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,GAAT,QAAoB,aAApB;;AAEA,MAAMC,aAAa,GAAGD,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAdA;AAgBA,OAAO,MAAME,OAAN,SAAsBN,SAAtB,CAAgC;AAKrCO,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAW,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAlC;AAEA,wBACE,QAAC,QAAD;AAAA,6BACE,QAAC,KAAD;AAAO,QAAA,KAAK,EAAEN,aAAd;AAA6B,QAAA,SAAS,EAAE;AAACO,UAAAA,KAAK,EAAEJ;AAAR,SAAxC;AAAA,kBAEM,QAA0B;AAAA,cAAzB;AAACK,YAAAA,OAAD;AAAUC,YAAAA,IAAV;AAAgBC,YAAAA;AAAhB,WAAyB;AACtB,cAAGF,OAAH,EAAY,OAAOG,EAAP;AACf;AAJP;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAWD;;AAnBoC;AAA1BV,O,CACJW,S,GAAY,E;AAqBrB,eAAeX,OAAf","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport { Query } from 'react-apollo'\nimport { gql } from 'graphql-tag'\n\nconst PRODUCT_QUERY = gql`\n    query productQuery($title: String!){ \n        category(input: {title: $title}){\n          name\n          products{\n            inStock\n            name\n            id\n            brand\n            description\n            gallery\n          }\n      }\n    }\n`\n\nexport class Product extends Component {\n  static propTypes = {\n\n  }\n\n  render() {\n    const { name } = this.props.match.params\n\n    return (\n      <Fragment>\n        <Query query={PRODUCT_QUERY} variables={{title: name}}> \n          {\n              ({loading, data, error})=>{\n                  if(loading) return h1\n              }\n          }\n        </Query>\n      </Fragment>\n    )\n  }\n}\n\nexport default Product\n"]},"metadata":{},"sourceType":"module"}