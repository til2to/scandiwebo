{"ast":null,"code":"var _jsxFileName = \"/Volumes/Nana/I_T/projects_code/react/Repos/scandiwebo/src/components/Products.js\";\nimport React, { Component, Fragment } from 'react'; // import PropTypes from 'prop-types'\n\nimport { compose, graphql } from 'react-apollo';\nimport { Query } from 'react-apollo';\nimport { gql } from 'graphql-tag';\nimport styled from 'styled-components';\nimport ProductItem from './ProductItem';\nimport ProductPage from '../Pages/ProductPage';\nimport { Link } from 'react-router-dom';\nimport Categories from './Categories';\nimport { Navbar } from './Navbar';\nimport { CategoryItem } from './CategoryItem';\nimport { withApollo } from 'react-apollo';\nimport { PRODUCT_QUERY } from '../Data/GraphqlData'; // const PRODUCT_QUERY = gql`\n//     query productQuery($title: String!){ \n//         category(input: {title: $title}){\n//           name\n//           products{\n//             inStock\n//             name\n//             id\n//             brand\n//             description\n//             gallery\n//             attributes{\n//               id\n//               type\n//               name\n//               items{\n//                 id\n//                 value\n//                 displayValue\n//               }\n//             }\n//             prices{\n//               amount\n//               currency{\n//                 label\n//                 symbol\n//               }\n//             }\n//           }\n//       }\n//     }\n// `\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Products extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    const result = this.props.client({\n      query: PRODUCT_QUERY,\n      variables: {\n        title: this.props.match.params.name\n      }\n    });\n  }\n\n  render() {\n    let {\n      name\n    } = this.props.match.params;\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Categories, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Query, {\n        query: PRODUCT_QUERY,\n        variables: {\n          title: name\n        },\n        children: _ref => {\n          let {\n            data,\n            loading,\n            error\n          } = _ref;\n          if (loading) return /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \" Loading.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 35\n          }, this);\n          if (error) console.log(error.message);\n          return /*#__PURE__*/_jsxDEV(Wrap, {\n            children: data.category.products.map(prod => /*#__PURE__*/_jsxDEV(ProductItem, {\n              prod: prod\n            }, prod.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 22\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nexport default Products;\nconst Container = styled.div`\n  padding: 10px; \n`;\n_c = Container;\nconst Wrap = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin-left: 20px;\n`;\n_c2 = Wrap;\nconst Nav = styled.div`\n  display: flex;\n`;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Wrap\");","map":{"version":3,"sources":["/Volumes/Nana/I_T/projects_code/react/Repos/scandiwebo/src/components/Products.js"],"names":["React","Component","Fragment","compose","graphql","Query","gql","styled","ProductItem","ProductPage","Link","Categories","Navbar","CategoryItem","withApollo","PRODUCT_QUERY","Products","state","componentDidMount","result","props","client","query","variables","title","match","params","name","render","data","loading","error","console","log","message","category","products","map","prod","id","Container","div","Wrap","Nav"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CACA;;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,cAAjC;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,GAAT,QAAoB,aAApB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,aAAT,QAA8B,qBAA9B,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,MAAMC,QAAN,SAAuBf,SAAvB,CAAiC;AAAA;AAAA;AAAA,SACtCgB,KADsC,GAC9B,EAD8B;AAAA;;AAGtCC,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,MAAM,GAAG,KAAKC,KAAL,CAAWC,MAAX,CAAkB;AAC/BC,MAAAA,KAAK,EAAEP,aADwB;AACTQ,MAAAA,SAAS,EAAE;AAAEC,QAAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MAAjB,CAAwBC;AAAjC;AADF,KAAlB,CAAf;AAGD;;AAEDC,EAAAA,MAAM,GAAG;AACP,QAAI;AAAED,MAAAA;AAAF,QAAW,KAAKP,KAAL,CAAWK,KAAX,CAAiBC,MAAhC;AACA,wBACE,QAAC,SAAD;AAAA,8BACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AAAO,QAAA,KAAK,EAAEX,aAAd;AAA6B,QAAA,SAAS,EAAE;AAAES,UAAAA,KAAK,EAAEG;AAAT,SAAxC;AAAA,kBAEI,QAA8B;AAAA,cAA7B;AAAEE,YAAAA,IAAF;AAAQC,YAAAA,OAAR;AAAiBC,YAAAA;AAAjB,WAA6B;AAC5B,cAAID,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,cAAIC,KAAJ,EAAWC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AAEX,8BAAO,QAAC,IAAD;AAAA,sBAEHL,IAAI,CAACM,QAAL,CAAcC,QAAd,CAAuBC,GAAvB,CAA2BC,IAAI,iBAC7B,QAAC,WAAD;AAA2B,cAAA,IAAI,EAAEA;AAAjC,eAAkBA,IAAI,CAACC,EAAvB;AAAA;AAAA;AAAA;AAAA,oBADF;AAFG;AAAA;AAAA;AAAA;AAAA,kBAAP;AAOD;AAbL;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAqBD;;AAhCqC;AAmCxC,eAAevB,QAAf;AAEA,MAAMwB,SAAS,GAAGjC,MAAM,CAACkC,GAAI;AAC7B;AACA,CAFA;KAAMD,S;AAGN,MAAME,IAAI,GAAGnC,MAAM,CAACkC,GAAI;AACxB;AACA;AACA;AACA,CAJA;MAAMC,I;AAKN,MAAMC,GAAG,GAAGpC,MAAM,CAACkC,GAAI;AACvB;AACA,CAFA","sourcesContent":["import React, { Component, Fragment } from 'react'\n// import PropTypes from 'prop-types'\nimport { compose, graphql } from 'react-apollo'\nimport { Query } from 'react-apollo'\nimport { gql } from 'graphql-tag'\nimport styled from 'styled-components'\nimport ProductItem from './ProductItem'\nimport ProductPage from '../Pages/ProductPage'\nimport { Link } from 'react-router-dom'\nimport Categories from './Categories';\nimport { Navbar } from './Navbar';\nimport { CategoryItem } from './CategoryItem';\nimport { withApollo } from 'react-apollo'\nimport { PRODUCT_QUERY } from '../Data/GraphqlData'\n\n\n// const PRODUCT_QUERY = gql`\n//     query productQuery($title: String!){ \n//         category(input: {title: $title}){\n//           name\n//           products{\n//             inStock\n//             name\n//             id\n//             brand\n//             description\n//             gallery\n\n//             attributes{\n//               id\n//               type\n//               name\n\n//               items{\n//                 id\n//                 value\n//                 displayValue\n//               }\n//             }\n\n//             prices{\n//               amount\n//               currency{\n//                 label\n//                 symbol\n//               }\n//             }\n//           }\n//       }\n//     }\n// `\n\nexport class Products extends Component {\n  state = {}\n\n  componentDidMount() {\n    const result = this.props.client({\n      query: PRODUCT_QUERY, variables: { title: this.props.match.params.name }\n    })\n  }\n\n  render() {\n    let { name } = this.props.match.params\n    return (\n      <Container>\n        <Categories />\n        <Query query={PRODUCT_QUERY} variables={{ title: name }}>\n          {\n            ({ data, loading, error }) => {\n              if (loading) return <h4> Loading.</h4>\n              if (error) console.log(error.message)\n\n              return <Wrap>\n                {\n                  data.category.products.map(prod => (\n                    <ProductItem key={prod.id} prod={prod} />\n                  ))\n                }\n              </Wrap>\n            }\n          }\n        </Query>\n      </Container>\n    )\n  }\n}\n\nexport default Products\n\nconst Container = styled.div`\n  padding: 10px; \n`\nconst Wrap = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin-left: 20px;\n`\nconst Nav = styled.div`\n  display: flex;\n`"]},"metadata":{},"sourceType":"module"}