{"ast":null,"code":"var _jsxFileName = \"/Volumes/Nana/I_T/projects_code/react/scandiweb_task/src/components/Launch.js\";\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Query } from 'react-apollo';\nimport { gql } from 'graphql-tag';\nimport { params } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PRODUCT_QUERY = gql`\n    query productQuery($title: String! = all){ \n        category(input: {title: $title}){\n          name\n          products{\n            inStock\n            name\n            id\n            brand\n            description\n            gallery\n          }\n      }\n    }\n`;\nexport class Launch extends Component {\n  render() {\n    let {\n      title\n    } = this.props.match.params;\n    let name = toString(title); // console.log(title)\n\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Query, {\n        query: PRODUCT_QUERY,\n        variables: {\n          title\n        },\n        children: _ref => {\n          let {\n            loading,\n            data,\n            error\n          } = _ref;\n          if (loading) return /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Loading\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 32\n          }, this);\n          if (error) console.log(error);\n          console.log(data);\n          return /*#__PURE__*/_jsxDEV(Wrap, {\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Hello launch component \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 20\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nLaunch.propTypes = {};\nexport default Launch;\nconst Wrap = styled.div`\n\n`;\n_c = Wrap;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wrap\");","map":{"version":3,"sources":["/Volumes/Nana/I_T/projects_code/react/scandiweb_task/src/components/Launch.js"],"names":["React","Component","Fragment","PropTypes","Query","gql","params","styled","PRODUCT_QUERY","Launch","render","title","props","match","name","toString","loading","data","error","console","log","propTypes","Wrap","div"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,GAAT,QAAoB,aAApB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;AAEA,MAAMC,aAAa,GAAGH,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAdA;AAgBA,OAAO,MAAMI,MAAN,SAAqBR,SAArB,CAA+B;AAKpCS,EAAAA,MAAM,GAAG;AACP,QAAI;AAAEC,MAAAA;AAAF,QAAY,KAAKC,KAAL,CAAWC,KAAX,CAAiBP,MAAjC;AACA,QAAIQ,IAAI,GAAGC,QAAQ,CAACJ,KAAD,CAAnB,CAFO,CAGP;;AACA,wBACE,QAAC,QAAD;AAAA,6BACE,QAAC,KAAD;AAAO,QAAA,KAAK,EAAEH,aAAd;AAA6B,QAAA,SAAS,EAAE;AAAEG,UAAAA;AAAF,SAAxC;AAAA,kBAGE,QAA4B;AAAA,cAA3B;AAACK,YAAAA,OAAD;AAAUC,YAAAA,IAAV;AAAgBC,YAAAA;AAAhB,WAA2B;AAC1B,cAAGF,OAAH,EAAY,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACZ,cAAGE,KAAH,EAAUC,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAEVC,UAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,8BAAO,QAAC,IAAD;AAAA,mCACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADK;AAAA;AAAA;AAAA;AAAA,kBAAP;AAGD;AAXH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAkBD;;AA3BmC;AAAzBR,M,CACJY,S,GAAY,E;AA6BrB,eAAeZ,MAAf;AAEA,MAAMa,IAAI,GAAGf,MAAM,CAACgB,GAAI;AACxB;AACA,CAFA;KAAMD,I","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport { Query } from 'react-apollo'\nimport { gql } from 'graphql-tag'\nimport { params } from 'react-router-dom'\nimport styled from 'styled-components'\n\nconst PRODUCT_QUERY = gql`\n    query productQuery($title: String! = all){ \n        category(input: {title: $title}){\n          name\n          products{\n            inStock\n            name\n            id\n            brand\n            description\n            gallery\n          }\n      }\n    }\n`\n\nexport class Launch extends Component {\n  static propTypes = {\n\n  }\n\n  render() {\n    let { title } = this.props.match.params\n    let name = toString(title)\n    // console.log(title)\n    return (\n      <Fragment>\n        <Query query={PRODUCT_QUERY} variables={{ title }}>\n        \n        {\n          ({loading, data, error}) => {\n            if(loading) return <h1>Loading</h1>\n            if(error) console.log(error)\n            \n            console.log(data)\n            return <Wrap>\n              <h1>Hello launch component </h1>\n            </Wrap>\n          }\n        }\n      </Query>\n      </Fragment>\n    )\n  }\n}\n\nexport default Launch\n\nconst Wrap = styled.div`\n\n`"]},"metadata":{},"sourceType":"module"}